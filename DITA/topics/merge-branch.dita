<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task
  PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="merge-branch">
  <title>Reintegrate a Branch</title>
  <taskbody>
    <prereq id="reintegrate-merge-prereq">
      <p id="p_g43_dgk_54b">
        <note type="other" othertype="Prerequisites" id="note_h43_dgk_54b">There are some conditions that apply to
          reintegrate a branch:<ul id="ul_ncf_wtq_skb">
            <li id="li_i43_dgk_54b" irina="irina">The server must support merge tracking.</li>
            <li id="li_j43_dgk_54b" irina="irina">The source branch (to be reintegrated) must be coherently synchronized with its
              parent branch. This means that all revisions between the branching point and the last
              revision merged from the parent branch to the child branch must be merged to the
              latter one (there must be no missing revisions in-between).</li>
            <li id="li_k43_dgk_54b" irina="irina">The working copy <b>must not</b> contain the following:<ul id="ul_tbg_4lg_34">
                <li id="li_l43_dgk_54b" irina="irina">Local modifications.</li>
                <li id="li_m43_dgk_54b" irina="irina">A mixture of revisions (all items must point to the same revision).</li>
                <li id="li_n43_dgk_54b" irina="irina">Sparse directories (all directories must be of <b>infinity</b> depth).</li>
                <li id="li_o43_dgk_54b" irina="irina">Switched items.</li>
              </ul></li>
            <li id="li_p43_dgk_54b" irina="irina">The revision of the working copy must be greater than or equal to the last revision
              of the parent branch with which the child branch was synchronized.</li>
          </ul></note>
        <note type="tip" id="note_q43_dgk_54b">You can use <xref href="pre-merge-checks.dita#pre-merge-checks">the
              <term>pre-merge checks</term> option</xref> to make sure these conditions are
          fulfilled.</note>
      </p>
      <p id="p_r43_dgk_54b">This method is useful when you have a feature branch on which the development has concluded
        and it should be merged back into its parent branch. Since you have kept the feature branch
        synchronized with its parent, the latest versions of them will be absolutely identical
        except for your feature branch changes. These changes can be reintegrated into the parent
        branch by using a working copy of it and the <uicontrol>Reintegrate a branch</uicontrol>
        option.</p>
      <p id="p_s43_dgk_54b">This method uses the <i>merge-tracking</i> features of <tm tmtype="tm">Apache
          Subversion</tm> to automatically calculate the correct revision ranges and to perform
        additional checks that will ensure that the branch to be reintegrated has been fully updated
        with its parent changes. This ensures that you do not accidentally undo work that others
        have committed to the parent branch since the last time you synchronized the child branch
        with it. After the merge, all branch development will be completely merged back into the
        parent branch, and the child branch will be redundant and can be deleted from the
          repository.<note type="tip" id="note_t43_dgk_54b">Before reintegrating the child branch it is recommended to
          synchronize it with its parent branch one more time, to help avoid any possible
          conflicts.</note></p>
      <p id="p_u43_dgk_54b">To reintegrate a child branch into its parent branch, follow these steps:</p>
    </prereq>
    <steps>
      <step id="start-wizard">
        <cmd>Go to menu <menucascade>
            <uicontrol>Tools</uicontrol>
            <uicontrol>Merge</uicontrol>
          </menucascade>.</cmd>
        <stepresult>The <uicontrol>Merge</uicontrol> wizard is opened.</stepresult>
      </step>
      <step>
        <cmd>Select the <uicontrol>Reintegrate a branch</uicontrol> option.</cmd>
        <info>
          <note id="note_v43_dgk_54b">This option is not available if the selected working copy item (or if it is a
            directory, any of the items inside of it) has any type of modification. This is because
            it is mandatory for the target item to have no modifications.</note>
        </info>
      </step>
      <step id="pre-merge-checks-step">
        <cmd>It is recommended that you select the <uicontrol>Perform pre-merge best practices
            checks of the working copy target</uicontrol> option to make sure that the working copy
          target item is ready for the merge operation.</cmd>
        <substeps id="substeps_b4c_vqr_4r">
          <substep>
            <cmd>Click the <uicontrol>Next</uicontrol> button.</cmd>
            <stepresult>If the <uicontrol>Perform pre-merge best practices checks of the working
                copy target</uicontrol> option is selected, <xref
                href="pre-merge-checks.dita#pre-merge-checks">the <uicontrol>Pre-Merge
                  Checks</uicontrol> wizard page</xref> is displayed.<note id="note_w43_dgk_54b">If errors are found you
                need to solve them before proceeding.</note></stepresult>
          </substep>
        </substeps>
      </step>
      <step>
        <cmd>Click the <uicontrol>Next</uicontrol> button.</cmd>
        <stepresult>The <uicontrol>Reintegrate a branch</uicontrol> wizard page is
          displayed.</stepresult>
      </step>
      <step>
        <cmd>In the <b>Child branch (URL)</b> text box, enter <xref
            href="entering-local-paths-urls.dita#entering-local-paths-urls/url-section"
            >the URL of the child <term>branch</term> to be reintegrated</xref>. This means that the
          URL must belong to the same repository as your working copy that was created from the
          parent branch.</cmd>
        <info><ph id="merge_browse_source_repository">You may also click the
              <uicontrol>Browse</uicontrol> button to browse the repository and find the desired
            branch. If you have previously merged from this branch, then you can simply use the
            drop-down menu, which displays a history of previously used URLs.</ph><note type="tip" id="note_x43_dgk_54b"
              ><ph id="merge-source-peg-revision">You can also specify a <xref
                href="using-peg-revisions.dita#using-peg-revisions"><term>peg revision</term></xref>
              at the end of the URL (for example, <codeph>URL@rev1234</codeph>).</ph> The peg
            revision specifies both the peg revision of the URL and the latest revision that will be
            considered for merging. By default, the <codeph>HEAD</codeph> revision is
            assumed.</note></info>
        <stepresult><ph id="options-set-result">The <xref
              href="merge-options.dita#merge-options"><uicontrol>Merge Options</uicontrol>
              wizard page</xref> is displayed that allows you to configure options for the
            operation.</ph><note id="note_y43_dgk_54b">Since a <i>reintegrate merge</i> is so specialized, most of the
            merge options are not available, except for those in the <uicontrol>File
              Comparison</uicontrol> category.</note></stepresult>
      </step>
      <step id="perform-merge">
        <cmd>Click the <uicontrol>Merge</uicontrol> button.</cmd>
        <stepresult>The merge operation is performed.</stepresult>
      </step>
    </steps>
    <result id="merge-result">
      <p id="p_z43_dgk_54b">If the merge is completed successfully, all the changes corresponding to the selected
        revisions should be merged in your working copy.</p>
    </result>
    <postreq id="merge-postreq">
      <p id="p_ap3_dgk_54b">It is recommended to look at the results of the merge, in the working copy, to review the
        changes and see if it meets your expectations. Since merging can sometimes be complicated,
          <xref href="resolve-merge-conflicts.dita#resolve-merge-conflicts" format="dita"
          >you may need to resolve conflicts</xref> after making major changes.<note type="note" id="note_bp3_dgk_54b"><ph
            id="commit-merge-result">The merge result is only in your local working copy and needs
            to be committed to the repository for it to be available to others.</ph></note></p>
    </postreq>
  </taskbody>
</task>
