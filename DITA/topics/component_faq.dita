<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="component_faq">
  <title>Frequently Asked Questions </title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Oxygen XML Author Component<indexterm>Frequently Asked
          Questions</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <section id="installation_and_licensing">
      <title>Installation and Licensing </title>
      <ol id="ol_d3f_dgk_54b">
        <li id="li_e3f_dgk_54b" irina="irina">
          <p id="p_f3f_dgk_54b">Are there any client requirements beyond the Java VM?</p>
          <p id="p_g3f_dgk_54b">Oracle Java version 11 or 17. At least 200 MB disk space and 200MB
            free memory is necessary for the <ph keyref="authorComponent"/>.</p>
        </li>
        <li id="li_h3f_dgk_54b" irina="irina">
          <p id="p_i3f_dgk_54b">Does the <ph keyref="authorComponent"/> support multiple documents being open
            simultaneously? What are the licensing ramifications?</p>
          <p id="p_j3f_dgk_54b">A single <i>AuthorComponentFactory</i> instance can create multiple
              <i>EditorComponentProvider</i> editors that can then be added and managed by the
            developer who customizes the component in a Swing <i>JTabbedPane</i>. A single license
            (floating or user-based) is enough for this.</p>
          <p id="p_k3f_dgk_54b">If you need to run multiple distinct Java processes using the <ph
              keyref="authorComponent"/>, the current floating license model allows for only two
            concurrent components from the same computer when using the HTTP floating license
            server. An additional started component will take an extra license seat. </p>
        </li>
      </ol>
    </section>
    <section id="functionality">
      <title>Functionality</title>
      <ol id="ol_l3f_dgk_54b">
        <li id="li_m3f_dgk_54b" irina="irina">
          <p id="p_n3f_dgk_54b">What graphic formats can be directly rendered in the <ph keyref="authorComponent"
            />?</p>
          <p id="p_o3f_dgk_54b">GIF, JPEG, PNG, BMP and SVG.</p>
        </li>
        <li id="li_p3f_dgk_54b" irina="irina">
          <p id="p_q3f_dgk_54b">Can links be embedded to retrieve (from the server) and &quot;play&quot; other types of
            digital assets, such as audio or video files?</p>
          <p id="p_r3f_dgk_54b">You could add listeners to intercept clicks and open the clicked links. This would
            require a good knowledge of the <i>Oxygen SDK</i>. The <ph keyref="authorComponent"/>
            can only render static images (no GIF animations). </p>
        </li>
        <li id="li_s3f_dgk_54b" irina="irina">
          <p id="p_t3f_dgk_54b">Does the <ph keyref="authorComponent"/> provide methods for uploading ancillary files
            (new graphics, for instance) to the hosting server?</p>
          <p id="p_u3f_dgk_54b">No.</p>
        </li>
        <li id="li_v3f_dgk_54b" irina="irina">
          <p id="p_w3f_dgk_54b">Does the <ph keyref="authorComponent"/> provide any type of autosave functionality?</p>
          <p id="p_x3f_dgk_54b">By default no, but you could customize it to save its content periodically to a file on
            disk.</p>
        </li>
        <li id="li_y3f_dgk_54b" irina="irina">
          <p id="p_z3f_dgk_54b">Assuming multiple documents can be edited simultaneously, can content be copied, cut,
            and pasted from one <ph keyref="authorComponent"/> &quot;instance&quot; to another?</p>
          <p id="p_ajf_dgk_54b">Yes.</p>
        </li>
        <li id="li_bjf_dgk_54b" irina="irina">
          <p id="p_cjf_dgk_54b">Does the <ph keyref="authorComponent"/> support pasting content from external sources
            (such as a web page or a Microsoft Word document and, if so, to what extent?</p>
          <p id="p_djf_dgk_54b">If no customizations are available, the content is pasted as simple text.
            Customizations are provided for the major <term>frameworks</term> (DITA, DocBook, TEI,
            etc.) that use a conversion XSLT stylesheet to convert HTML content from clipboard to
            the target XML.</p>
        </li>
        <li id="li_ejf_dgk_54b" irina="irina">
          <p id="p_fjf_dgk_54b">Can UTF-8 characters (such as Greeks, mathematical symbols, etc.) be inserted and
            rendered?</p>
          <p id="p_gjf_dgk_54b">Any UTF-8 character can be inserted and rendered, provided that the font used for
            editing supports rendering the characters. The font can be changed by developers but not
            by the users. When using a logical font (by default, <i>Serif</i> for the <ph
              keyref="authorComponent"/>), the JVM will know how to map all characters to glyphs.
            There is no character map available but you could implement one.</p>
        </li>
      </ol>
    </section>
    <section id="customization">
      <title>Customization</title>
      <ol id="ol_hjf_dgk_54b">
        <li id="li_ijf_dgk_54b" irina="irina">
          <p id="p_jjf_dgk_54b">Describe, in general terms, the menus, toolbars, contextual menu options, helper panes,
            and so on, that are available for the <ph keyref="authorComponent"/> out-of-the box.</p>
          <p id="p_kjf_dgk_54b">You can mount all actions available in the standalone <ph keyref="product"/>
            application on your custom toolbar. This includes custom actions defined in the
              <term>framework</term> customized for each XML type. </p>
          <p id="p_ljf_dgk_54b">The <ph keyref="authorComponent"/> also can provide the <xref
              href="outliner-view.dita#outliner-view"><uicontrol>Outline</uicontrol></xref>, <xref
              href="model-panel.dita#model-panel"><uicontrol>Model</uicontrol></xref>, <xref
              href="author-elements-view.dita#author-elements-view"
              ><uicontrol>Elements</uicontrol></xref>, and <xref
              href="author-attributes-view.dita#author-attributes-view"
                ><uicontrol>Attributes</uicontrol></xref> views that can be added to your own
            panels.</p>
        </li>
        <li id="li_mjf_dgk_54b" irina="irina">
          <p id="p_njf_dgk_54b">Describe, in general terms, the actions, project resources (for example, DTD/Schema for
            validation purposes, CSS/XSL for styling, etc.) and typical level of effort that would
            be required to deploy a <ph keyref="authorComponent"/> solution for a customer with a
            proprietary DTD.</p>
          <p id="p_ojf_dgk_54b">The <uicontrol>Author</uicontrol> mode internal engine uses CSS to render XML. </p>
          <p id="p_pjf_dgk_54b">For a special type of XML, you can create a custom <term>framework</term> (which also
            works in an <ph keyref="product"/> standalone version) that would also contain default
            schemas and custom actions. A simple <term>framework</term> would probably need 2-3
            weeks development time. For a complex <term>framework</term> with many custom actions,
            it could take a long time. <ph keyref="product"/> has built-in <term>frameworks</term>
            for editing (DocBook, DITA, TEI, etc.) and sources for them are available in <xref
              href="https://www.oxygenxml.com/developer.html#XML_Editor_Authoring_SDK" format="html"
              scope="external"> the Oxygen SDK</xref>.</p>
          <p id="p_qjf_dgk_54b">Multiple <term>frameworks</term> can co-exist in the same <ph keyref="product"/>
            instance and can be used at the same time for editing XML documents.</p>
        </li>
        <li id="li_rjf_dgk_54b" irina="irina">
          <p id="p_sjf_dgk_54b">Many customers desire a very simplistic interface for contributors (with little or no
            XML expertise) but a more robust XML editing environment for editors (or other users
            with more advanced XML expertise). How well does the <ph keyref="authorComponent"/>
            support varying degrees of user interface complexity and capability?</p>
          <p id="p_tjf_dgk_54b">
            <ul id="ul_ujf_dgk_54b">
              <li id="li_vjf_dgk_54b" irina="irina">
                <p id="p_wjf_dgk_54b"><i>Showing/hiding menus, toolbars, helpers, etc.</i></p>
                <p id="p_xjf_dgk_54b">You assemble all the UI parts from the <ph keyref="authorComponent"/>. For
                  example, you could provide two implementations: one for advanced users and one for
                  content authors.</p>
              </li>
              <li id="li_yjf_dgk_54b" irina="irina">
                <p id="p_zjf_dgk_54b"><i>Forcing behaviors (for example, ensuring <xref
                      keyref="glossentry_track-changes">change tracking</xref> is on and preventing
                    it from being shut down).</i></p>
                <p id="p_akf_dgk_54b">You could avoid placing the <term>change tracking</term> toolbar actions in the
                  UI. You could also use the API to turn <term>change tracking</term> ON when the
                  content has been loaded.</p>
              </li>
              <li id="li_bkf_dgk_54b" irina="irina">
                <p id="p_ckf_dgk_54b"><i>Preventing access to &quot;privileged&quot; editor processes (for example,
                    accept/reject changes).</i></p>
                <p id="p_dkf_dgk_54b">You can remove the <term>change tracking</term> actions completely in a custom
                  implementation, including the ones from the contextual menu.</p>
              </li>
              <li id="li_ekf_dgk_54b" irina="irina">
                <p id="p_fkf_dgk_54b"><i>Presenting and/or describing XML constructs (for example, tags) in
                    &quot;plain-English&quot;.</i></p>
                <p id="p_gkf_dgk_54b">Using our API, you can customize what the Outline view or Breadcrumb displays for
                  each XML tag. You can also customize the in-place content completion list.</p>
              </li>
              <li id="li_hkf_dgk_54b" irina="irina">
                <p id="p_ikf_dgk_54b"><i>Presenting a small subset of the overall XML tag set (rather than the full tag
                    set) for use by contributors (for example, allowing an author to only insert
                    Heading, Para, and inline emphasis).</i></p>
                <p id="p_jkf_dgk_54b">The API allows for a content completion filter that also affects the
                    <i>Elements</i> view.</p>
              </li>
            </ul>
          </p>
        </li>
        <li id="li_kkf_dgk_54b" irina="irina">
          <p id="p_lkf_dgk_54b">Does the <ph keyref="authorComponent"/> API provide access to the XML document, for
            manipulation purposes, using common XML syntax (such as DOM, XPath, etc.)?</p>
          <p id="p_mkf_dgk_54b">Yes, using the <ph keyref="authorComponent"/> API.</p>
        </li>
        <li id="li_nkf_dgk_54b" irina="irina">
          <p id="p_okf_dgk_54b">Can custom dialog boxes be developed and launched to collect information in a
            &quot;form&quot; (with scripting behind to tag the collection information and embed it
            in the XML document)?</p>
          <p id="p_pkf_dgk_54b">Yes.</p>
        </li>
        <li id="li_qkf_dgk_54b" irina="irina">
          <p id="p_rkf_dgk_54b">Can project resources and customizations be readily shared between the desktop and
            component versions of your <ph keyref="authorComponent"/> product line?</p>
          <p id="p_skf_dgk_54b">A <term>framework</term> developed for the standalone version of the <ph
              keyref="product"/> application can then be bundled with the <ph
              keyref="authorComponent"/>. For example, you could use the same <term>framework</term>
            that you use in the <ph keyref="product"/> standalone distribution. </p>
          <p id="p_tkf_dgk_54b">A custom editing solution can deploy one or more <term>frameworks</term> that can be
            used at the same time.</p>
        </li>
      </ol>
    </section>
  </body>
</topic>
