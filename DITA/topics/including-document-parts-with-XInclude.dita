<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="including-document-parts-with-XInclude">
  <title>Combining XML Documents and Fragments Using XInclude</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>XML documents<indexterm>XInclude</indexterm></indexterm>
        <indexterm>XInclude</indexterm>
        <indexterm>XInclude 1.1 features</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p id="p_xvz_bgk_54b"><b>XInclude</b> is a standard for assembling XML instances into another
      XML document through inclusion. A <xref keyref="glossentry_main-file"><term>main
        file</term></xref> can be dynamically created from smaller XML documents without having to
      physically duplicate the content of the smaller files. The advantage of using XInclude instead
      of the <xref href="large-documents-DTD-entities.dita#large-documents-DTD-entities">DTD
        Entities method</xref> is that each of the assembled documents is permitted to contain a
      Document Type Declaration (DOCTYPE). This means that each file is a valid XML instance and can
      be independently validated. It also means that the main document, which includes smaller
      instances, can be validated without having to remove or comment out the DOCTYPE (as is the
      case with External Entities).</p>
    <section id="enabling_xinclude_support_in">
      <title>Enabling XInclude Support in <ph keyref="product"></ph></title>
      <p id="p_yvz_bgk_54b">The XInclude support in <ph keyref="product"></ph> is enabled by default. It is controlled
        by the <xref href="preferences-xml-parser.dita#preferences-xml-parser/enable-xinclude"
            ><uicontrol>Enable XInclude processing</uicontrol> option</xref> in the <xref
          href="preferences-xml-parser.dita#preferences-xml-parser"><menucascade>
            <uicontrol>XML</uicontrol>
            <uicontrol>XML Parser</uicontrol>
          </menucascade> preferences page</xref>. When enabled, <ph keyref="product"></ph> will be
        able to validate and transform documents comprised of parts added using XInclude.</p>
    </section>
    <section id="example_using_xinclude_to_combine_chapters_in_an_">
      <title>Example: Using XInclude to Combine Files</title>
      <p id="p_zvz_bgk_54b">A chapter file (<filepath>introduction.xml</filepath>) looks like
        this:<codeblock outputclass="language-xml" id="codeblock_awz_bgk_54b">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"&gt;
&lt;chapter&gt;
    &lt;title&gt;Getting started&lt;/title&gt;
    &lt;section&gt;
        &lt;title&gt;Section title&lt;/title&gt;
        &lt;para&gt;Para text&lt;/para&gt;
    &lt;/section&gt;
&lt;/chapter&gt;</codeblock></p>
      <p id="p_bwz_bgk_54b">The main article (<term>main file</term>) looks like
        this:<codeblock outputclass="language-xml" id="codeblock_cwz_bgk_54b">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.docbook.org/xml/4.3/docbookx.dtd"
[ &lt;!ENTITY % xinclude SYSTEM "../frameworks/docbook/dtd/xinclude.mod"&gt;
%xinclude;
]&gt;
&lt;article&gt;
    &lt;title&gt;Install guide&lt;/title&gt;
    &lt;para&gt;This is the install guide.&lt;/para&gt;
    &lt;xi:include xmlns:xi="http://www.w3.org/2001/XInclude" 
                    href="introduction.xml"&gt;
      &lt;xi:fallback&gt;
        &lt;para&gt;
          &lt;emphasis&gt;FIXME: MISSING XINCLUDE CONTENT&lt;/emphasis&gt;
        &lt;/para&gt;
      &lt;/xi:fallback&gt;
    &lt;/xi:include&gt;
&lt;/article&gt;</codeblock></p>
      <p id="p_dwz_bgk_54b">In this example, note the following:<ul id="ul_ewz_bgk_54b">
          <li id="li_fwz_bgk_54b" irina="irina">The DOCTYPE declaration defines an entity that references a file containing the
            information to add the <i>xi</i> namespace to certain elements defined by the DocBook
            DTD.</li>
          <li id="li_gwz_bgk_54b" irina="irina">The href attribute of the <i>xi:include</i> element specifies that the
              <filepath>introduction.xml</filepath> file will replace the <i>xi:include</i> element
            when the document is parsed.</li>
          <li id="li_hwz_bgk_54b" irina="irina">If the <filepath>introduction.xml</filepath> file cannot be found, the parser will use
            the value of the <i>xi:fallback</i> element - a <i>FIXME</i> message.</li>
        </ul></p>
    </section>
    <section id="example_using_xinclude_to_combine_fragments_of_fi">
      <title>Example: Using XInclude to Combine Fragments of Files</title>
      <p id="p_iwz_bgk_54b">If you want to include only a fragment of a file in the <xref
          keyref="glossentry_main-file"><term>main file</term></xref>, the fragment must be
        contained in a tag having an <xmlatt>xml:id</xmlatt> attribute and you must use an XPointer
        expression pointing to the <xmlatt>xml:id</xmlatt> value.<note type="notice"
          id="note_jwz_bgk_54b"><ph keyref="product"/> supports the <xref
            href="http://www.w3.org/TR/2003/REC-xptr-framework-20030325/" format="html"
            scope="external">XPointer <term>Framework</term></xref> and the <xref
            href="http://www.w3.org/TR/2003/REC-xptr-element-20030325/" format="html"
            scope="external">XPointer element() Scheme</xref>, but it does NOT support the <xref
            href="https://www.w3.org/TR/xptr-xpointer/" format="html" scope="external">XPointer
            xpointer() Scheme</xref>.</note></p>
      <p id="p_kwz_bgk_54b">For example, if the <term>main file</term>
        is:<codeblock outputclass="language-xml" id="codeblock_lwz_bgk_54b">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-model href="test.rng" type="application/xml" 
        schematypens="http://relaxng.org/ns/structure/1.0"?&gt;
&lt;test&gt;
    &lt;xi:include href="a.xml" xpointer="a1"
        xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
&lt;/test&gt;        </codeblock></p>
      <p id="p_mwz_bgk_54b">and the file (<filepath>a.xml</filepath>)
        is:<codeblock outputclass="language-xml" id="codeblock_nwz_bgk_54b">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;test&gt;
    &lt;a xml:id="a1"&gt;test&lt;/a&gt;
&lt;/test&gt;        </codeblock></p>
      <p id="p_owz_bgk_54b">after resolving the XPointer reference, the document
        is:<codeblock outputclass="language-xml" id="codeblock_pwz_bgk_54b">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-model href="test.rng" type="application/xml" 
          schematypens="http://relaxng.org/ns/structure/1.0"?&gt;
&lt;test&gt;
    &lt;a xml:id="a1" xml:base="a.xml"&gt;test&lt;/a&gt;
&lt;/test&gt;</codeblock></p>
    </section>
    <section conkeyref="reusables-editing-documents/Entities_XInclude_viewing_expanded_content"
      id="d1299e178"/>
    <section id="xinclude_11_features">
      <title>XInclude 1.1 Features</title>
      <p id="p_qwz_bgk_54b"><ph keyref="product"/> offers partial support for XInclude 1.1 features. This includes
        support for fragment identifiers and attribute copying.</p>
      <p id="p_rwz_bgk_54b">
        <ul id="ul_swz_bgk_54b">
          <li id="li_twz_bgk_54b" irina="irina">
            <p id="p_uwz_bgk_54b"><u><b>Fragment Identifiers</b></u></p>
            <p id="p_vwz_bgk_54b">You can use <xmlelement>xi:include</xmlelement> to reference a text file and specify
              the <codeph>@fragid</codeph> value so that you only get part of that text file in the
              main document. For some examples and to see how the
                <xmlelement>xi:include</xmlelement> gets expanded when the <xmlatt>fragid</xmlatt>
              specifies a line range or character range, see <xref
                href="https://www.w3.org/TR/xinclude-11/#text-example-2" format="html"
                scope="external"><b>Textual Inclusion Examples with RFC5147 Fragment
                Identifiers</b></xref>.</p>
          </li>
          <li id="li_wwz_bgk_54b" irina="irina">
            <p id="p_xwz_bgk_54b"><u><b>Attribute Copying</b></u></p>
            <p id="p_ywz_bgk_54b">Any <term>namespaced</term> attribute defined on the
                <xmlelement>xi:include</xmlelement> element will be passed to the root element of
              the included content.</p>
            <p id="p_zwz_bgk_54b">For example, if you have
              this:<codeblock outputclass="language-xml" id="codeblock_axz_bgk_54b">&lt;xi:include href="section2.xml" xmlns:xi="http://www.w3.org/2001/XInclude" 
  set-xml-id="sectInner1"/></codeblock></p>
            <p id="p_bxz_bgk_54b">and <filepath>section2.xml</filepath> looks like
              this:<codeblock outputclass="language-xml" id="codeblock_cxz_bgk_54b">&lt;sect2 xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="section2">
    &lt;title>FS2&lt;/title>
    &lt;para>P2&lt;/para>
&lt;/sect2></codeblock></p>
            <p id="p_dxz_bgk_54b">then the final processed result will have the original
                <codeph>xml:id="section2"</codeph> replaced with the value specified in the
                <i>xi:included</i> section.</p>
            <p id="p_exz_bgk_54b">For more information, see <xref
                href="https://www.w3.org/TR/xinclude-11/#attribute-copying" format="html"
                scope="external"><b>Attribute Copying when Processing XML</b></xref>. Also, to see
              more examples, see <xref href="https://www.w3.org/TR/xinclude-11/#att-copy-example"
                format="html" scope="external"><b>Attribute Copying Examples</b></xref>.</p>
          </li>
        </ul>
      </p>
    </section>
  </body>
  <related-links>
      <link format="html" href="https://www.w3.org/TR/xinclude-11/" scope="external">
        <linktext>W3C Specifications: XML Inclusions (XInclude) Version 1.1</linktext>
      </link>
  </related-links>
</topic>
