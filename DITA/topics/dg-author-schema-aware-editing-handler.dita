<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="dg-author-schema-aware-editing-handler">
  <title>Handling Schema-Aware Editing Events</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Framework customization<indexterm>Extensions<indexterm>Author Schema Aware
              Editing Handler</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p id="p_lrb_dgk_54b">The <i>AuthorSchemaAwareEditingHandlerAdapter</i> extension point allows you to handle
      certain <uicontrol>Author</uicontrol> mode actions in various ways. For example, implementing
      the <codeph>AuthorSchemaAwareEditingHandlerAdapter</codeph> makes it possible to handle events
      such as typing, the keyboard delete event at a given offset (using Delete or Backspace keys),
      delete element tags, delete selection, join elements, or paste fragment. It also makes it
      possible to improve solutions that are proposed by the paste mechanism in <ph keyref="product"
      /> when pasting content (through the use of <xref
        href="#dg-author-schema-aware-editing-handler/methods_for_improving_the_smart_paste_feature"
        format="dita">some specific methods</xref>).</p>
    <section id="how_to_implement_an_authorschemaawareeditinghandl">
      <title>How to Implement an <i>AuthorSchemaAwareEditingHandlerAdapter</i></title>
      <p id="p_mrb_dgk_54b">For this handler to be called, the <xref
          href="preferences-schema-aware.dita#preferences-schema-aware/schema-aware-editing-section"
            ><uicontrol>Schema-Aware Editing</uicontrol> option</xref> must be set to <b>On</b> or
          <b>Custom</b> in the <xref href="preferences-schema-aware.dita#preferences-schema-aware"
            ><uicontrol>Schema-Aware</uicontrol> preferences page</xref>. The handler can either
        resolve a specific case, let the default implementation take place, or reject the edit
        entirely by throwing an <codeph>InvalidEditException</codeph>.</p>
      <p id="p_nrb_dgk_54b">To implement your own <i>AuthorSchemaAwareEditingHandlerAdapter</i>, follow this procedure:<ol id="ol_orb_dgk_54b">
          <li id="li_prb_dgk_54b" irina="irina">Implement the <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorSchemaAwareEditingHandlerAdapter.html"
              format="html" scope="external"
                ><i>ro.sync.ecss.extensions.api.AuthorSchemaAwareEditingHandlerAdapter</i></xref>
            extension.</li>
          <li id="li_qrb_dgk_54b" irina="irina">To instruct <ph keyref="product"/> to use this newly created implementation, <xref
              href="dg-extensions-bundle.dita#dg-extensions-bundle">configure an extensions
              bundle</xref> and return the <i>AuthorSchemaAwareEditingHandlerAdapter</i>
            implementation using the
              <i>ro.sync.ecss.extensions.api.ExtensionsBundle.getAuthorSchemaAwareEditingHandlerAdapter()</i>
            method.</li>
        </ol></p>
    </section>
    <section id="example">
      <title>Example</title>
      <p id="p_rrb_dgk_54b">Typing events can be handled using the <i>handleTyping</i> method. For example, the
          <codeph>AuthorSchemaAwareEditingHandler</codeph> checks if the schema is not a learned
        one, was loaded successfully, and if the <xref
          href="preferences-schema-aware.dita#preferences-schema-aware/smart-paste-drag-drop"
            ><uicontrol>Smart paste and drag and drop</uicontrol> option</xref> is selected. If
        these conditions are met, the event will be handled.</p>
      <codeblock outputclass="language-java" id="codeblock_srb_dgk_54b">public class AuthorSchemaAwareEditingHandlerAdapter 
              extends AuthorSchemaAwareEditingHandler {

/**
 * @see AuthorSchemaAwareEditingHandler#handleTyping
(int, char, ro.sync.ecss.extensions.api.AuthorAccess)
 */
public boolean handleTyping(int offset, char ch, AuthorAccess authorAccess)
throws InvalidEditException {
  boolean handleTyping = false;
  AuthorSchemaManager authorSchemaManager = 
authorAccess.getDocumentController().getAuthorSchemaManager();
  if (!authorSchemaManager.isLearnSchema() &amp;&amp; 
      !authorSchemaManager.hasLoadingErrors() &amp;&amp;
      authorSchemaManager.getAuthorSchemaAwareOptions().isEnableSmartTyping()) {
    try {
      AuthorDocumentFragment characterFragment = 
authorAccess.getDocumentController().createNewDocumentTextFragment
(String.valueOf(ch));    
      handleTyping = handleInsertionEvent
(offset, new AuthorDocumentFragment[] {characterFragment}, authorAccess);
    } catch (AuthorOperationException e) {
      throw new InvalidEditException
(e.getMessage(), "Invalid typing event: " + e.getMessage(), e, false);
    }
  }
  return handleTyping;    
}</codeblock>
      <note conkeyref="reusable_notes_java-files/sdf_project" id="note_trb_dgk_54b"/>
    </section>
    <section id="methods_for_improving_the_smart_paste_feature">
      <title>Methods for Improving the Paste Mechanism</title>
      <p id="p_urb_dgk_54b">
        <dl id="dl_vrb_dgk_54b">
          <dlentry id="dlentry_wrb_dgk_54b">
            <dt><i>getAncestorDetectionOptions</i></dt>
            <dd>When pasting content in <uicontrol>Author</uicontrol> mode, if the result causes the
              document to become invalid, <ph keyref="product"/> will propose solutions to make it
              valid. As a possible solution, <ph keyref="product"/> might surround the pasted
              content in a sequence of ancestor elements. This <xref
                href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorSchemaAwareEditingHandlerAdapter.html#getAncestorDetectionOptions--"
                format="html" scope="external"><i>getAncestorDetectionOptions</i></xref> method
              allows you to choose which parent elements might be a possible solution.</dd>
          </dlentry>
          <dlentry id="dlentry_xrb_dgk_54b">
            <dt><i>canBeReplaced</i></dt>
            <dd>Allows you to improve solutions that might be proposed by the paste mechanism when
              pasting content in <ph keyref="product"/>. For example, when pasting an element inside
              an empty element with the same name, this <xref
                href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorSchemaAwareEditingHandlerAdapter.html#canBeReplaced-ro.sync.ecss.extensions.api.node.AuthorNode-"
                format="html" scope="external"><i>canBeReplaced</i></xref> method allows <ph
                keyref="product"/> to replace the empty node rather than pasting it after or before
              the empty node. The callback could also reject this behavior if, for instance, the
              replacement node contains attributes.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
  </body>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link format="html"
        href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/node/AuthorDocumentFragment.html"
        scope="external">
        <linktext><i>AuthorDocumentFragment Class</i></linktext>
      </link>
    </linklist>
  </related-links>
</topic>
