<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="implementing-custom-form-controls">
  <title>Implementing Custom Form Controls</title>
  <shortdesc>If the built-in form controls are not sufficient for your needs, you can implement
    custom form controls in Java.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>CSS extensions<indexterm>Custom form controls</indexterm></indexterm>
        <indexterm>Custom form controls</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <section id="custom_form_controls_implementation">
      <title>Custom Form Controls Implementation</title>
      <p id="p_oyd_dgk_54b">You can specify custom form controls using the following properties:<ul id="ul_r3b_3wy_js">
          <li id="li_pyd_dgk_54b" irina="irina"><uicontrol>rendererClassName</uicontrol> - The name of the class
            that draws the edited value. It must be an implementation of <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/editor/InplaceRenderer.html"
              format="html" scope="external"
                ><term>ro.sync.ecss.extensions.api.editor.InplaceRenderer</term></xref>. The
            renderer has to be a <uicontrol>SWING</uicontrol> implementation and can be used both in
            the standalone and Eclipse distributions.</li>
          <li id="li_qyd_dgk_54b" irina="irina"><uicontrol>swingEditorClassName</uicontrol> - You can use this
            property for the standalone (<uicontrol>Swing</uicontrol>-based) distribution to specify
            the name of the class used for editing. It is a <uicontrol>Swing</uicontrol>
            implementation of <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/editor/InplaceEditor.html"
              format="html" scope="external"
                ><term>ro.sync.ecss.extensions.api.editor.InplaceEditor</term></xref>.</li>
          <li id="li_ryd_dgk_54b" irina="irina"><uicontrol>swtEditorClassName</uicontrol> - You can use this
            property for the Eclipse plugin distribution to specify the name of the class used for
            editing. It is a <uicontrol>SWT</uicontrol> implementation of the <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/editor/InplaceEditor.html"
              format="html" scope="external"
                ><term>ro.sync.ecss.extensions.api.editor.InplaceEditor</term></xref>.<note
              id="note_syd_dgk_54b">If the custom form control is intended to work in the <ph
                keyref="product"/> standalone distribution, the declaration of
                <uicontrol>swtEditorClassName</uicontrol> is not required. The
                <uicontrol>renderer</uicontrol> (the class that draws the value) has different
              properties from the <uicontrol>editor</uicontrol> (the class that edits the value)
              because you can present a value in one way and edit it in another.</note></li>
          <li id="classpath" irina="irina"><uicontrol>classpath</uicontrol> - You can use this property to specify
            the location of the classes used for a custom form control. The value of the
              <uicontrol>classpath</uicontrol> property is an enumeration of URLs separated by
            comma.</li>
          <li id="li_tyd_dgk_54b" irina="irina"><uicontrol>edit</uicontrol> - If your form control edits the value of an attribute or
            the text value of an element, you can use the <codeph>@attribute_name</codeph> and
              <codeph>#text</codeph> predefined values and <ph keyref="product"/> will perform the
            commit logic by itself. You can use the <codeph>custom</codeph> value to perform the
            commit logic yourself.</li>
          <li product="author editor" id="li_uyd_dgk_54b" irina="irina">
            <p id="p_vyd_dgk_54b"><uicontrol>saHeavyFormControlClassName</uicontrol> - This type of
              form control is effectively present at all times at its allocated bounds. This is
              useful if you need a form control that renders dynamic or interactive SVG documents
              (for example, if you have an SVG document that displays tooltips when hovering over
              certain areas). It is also helpful if you want to use JavaFX, since JavaFX-based form
              controls are not compatible with the classic form control architecture.</p>
            <p id="p_wyd_dgk_54b">The value of this property is a class name that must implement the
                <xref
                href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/editor/InplaceHeavyEditor.html"
                format="html" scope="external"
                  ><term>ro.sync.ecss.extensions.api.editor.InplaceHeavyEditor</term></xref> method.
              The <xref keyref="glossentry_jar"><term>JAR</term></xref> that contains this
              implementation can either be added in the <xref
                href="document-type-classpath-tab.dita#document-type-classpath-tab"
                  ><uicontrol>Classpath</uicontrol> tab in the <uicontrol>Document Type
                  Configuration</uicontrol> dialog box</xref> for your particular <xref
                keyref="glossentry_framework"><term>framework</term></xref> or specified with the
                <xref href="#implementing-custom-form-controls/classpath" format="dita"
                  ><codeph>classpath</codeph> property</xref>.</p>
          </li>
          <li product="authorEclipse editorEclipse" id="li_xyd_dgk_54b" irina="irina">
            <p id="p_yyd_dgk_54b"><uicontrol>ecHeavyFormControlClassName</uicontrol> - This type of
              form control is effectively present at all times at its allocated bounds. This is
              useful if you need a form control that renders dynamic or interactive SVG documents
              (for example, if you have an SVG document that displays tooltips when hovering over
              certain areas).</p>
            <p id="p_zyd_dgk_54b">The value of this property is a class name that must implement the
                <xref
                href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/editor/InplaceHeavyEditor.html"
                format="html" scope="external"
                  ><term>ro.sync.ecss.extensions.api.editor.InplaceHeavyEditor</term></xref> method.
              The <xref keyref="glossentry_jar"><term>JAR</term></xref> that contains this
              implementation can either be added in the <xref
                href="document-type-classpath-tab.dita#document-type-classpath-tab"
                  ><uicontrol>Classpath</uicontrol> tab in the <uicontrol>Document Type
                  Configuration</uicontrol> dialog box</xref> for your particular <xref
                keyref="glossentry_framework"><term>framework</term></xref> or specified with the
                <xref href="#implementing-custom-form-controls/classpath" format="dita"
                  ><codeph>classpath</codeph> property</xref>.</p>
          </li>
        </ul></p>
    </section>
    <section id="example_java_code">
      <title>Example: Java Code</title>
      <p id="p_azd_dgk_54b">The following is a sample Java code for implementing a custom combo box form control that
        inserts an XML element in the content when the editing stops:</p>
      <codeblock outputclass="language-java" id="codeblock_bzd_dgk_54b">public class ComboBoxEditor  extends AbstractInplaceEditor {
  /**
   * @see ro.sync.ecss.extensions.api.editor.InplaceEditor#stopEditing()
   */
  @Override
   public void stopEditing() {
     Runnable customCommit =  new Runnable() {
      @Override
       public void run() {
        AuthorDocumentController documentController = 
            context.getAuthorAccess().getDocumentController();
        documentController.insertXMLFragment( "&lt;custom/&gt;", offset);
      }
    };
    EditingEvent event =  new EditingEvent(customCommit,  true);
    fireEditingStopped(event);
  }</codeblock>
      <p id="p_czd_dgk_54b">The custom form controls can use any of the predefined properties of the <xref
          href="form-controls.dita#form-controls">built-in form controls</xref>, as well as
        specified custom properties.</p>
    </section>
    <section id="example_css">
      <title>Example: CSS</title>
      <p id="p_dzd_dgk_54b">The following is an example of how to specify a custom form control in the
        CSS:<codeblock outputclass="language-css" id="codeblock_ezd_dgk_54b">myElement {
    content: oxy_editor(
        rendererClassName, "com.custom.editors.CustomRenderer",
        swingEditorClassName, "com.custom.editors.SwingCustomEditor",
        swtEditorClassName, "com.custom.editors.SwtCustomEditor",
        edit, "@my_attr",
        customProperty1, "customValue1",
        customProperty2, "customValue2"
    )
}</codeblock></p>
    </section>
    <section id="how_to_implement_custom_form_controls">
      <title>How to Implement Custom Form Controls</title>
      <p id="p_fzd_dgk_54b">To implement a custom form control, follow these steps:<ol id="ol_dkr_1xy_js">
          <li id="li_gzd_dgk_54b" irina="irina">Download the <ph keyref="product"/> SDK at: <xref
              href="https://www.oxygenxml.com/oxygen_sdk.html" format="html" scope="external"
            />.</li>
          <li id="li_hzd_dgk_54b" irina="irina">Implement the custom form control by extending <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/editor/InplaceEditorRendererAdapter.html"
              format="html" scope="external"
                ><term>ro.sync.ecss.extensions.api.editor.InplaceEditorRendererAdapter</term></xref>.
            You could also use <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/editor/AbstractInplaceEditor.html"
              format="html" scope="external"
                ><term>ro.sync.ecss.extensions.api.editor.AbstractInplaceEditor</term></xref>, which
            offers some default implementations and listeners management.</li>
          <li id="li_izd_dgk_54b" irina="irina">Pack the previous implementation in a Java <xref keyref="glossentry_jar"
                ><term>JAR</term></xref> library.</li>
          <li id="li_jzd_dgk_54b" irina="irina">Copy the <term>JAR</term> library to the <filepath><term
                conkeyref="reusables-user-guide/oxy-install-dir"
              />/frameworks/[FRAMEWORK_DIR]</filepath> directory.</li>
          <li id="li_kzd_dgk_54b" irina="irina">In <ph keyref="product"/>, <ph
              conkeyref="reusables-preferences-pages/open-the-preferences-page"/>, go to
              <uicontrol>Document Type Association</uicontrol>, edit the appropriate
              <term>framework</term>, and add the <term>JAR</term> library in the
              <uicontrol>Classpath</uicontrol> tab.</li>
          <li id="li_lzd_dgk_54b" irina="irina">Specify the custom form control in your CSS, as described above.</li>
        </ol></p>
    </section>
    <p id="p_mzd_dgk_54b">
      <note type="tip" id="note_nzd_dgk_54b"><ph conkeyref="reusables-author-mode-customization/samples-ph"/></note>
    </p>
    <section id="section_jhq_vr2_w5b">
      <title>Resources</title>
      <p id="p_xpd_dgk_54b">For more information about form controls, watch our video
        demonstration:</p>
      <p id="p_ypd_dgk_54b"><object width="450" height="250"
          data="https://www.youtube.com/embed/-WY3wzkMSLM" outputclass="iframe">
          <param name="allowfullscreen" value="true"/>
        </object></p>
    </section>
  </body>
</topic>
