<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="xml-refactoring-operation-descriptor">
  <title>Custom Refactoring Operation Descriptor File</title>
  <body>
    <p id="p_tg1_cgk_54b">The second step in creating a custom refactoring operation is to create an
      operation descriptor file. The easiest way to do this is to use the <uicontrol>New</uicontrol>
      document wizard and choose the <uicontrol>XML Refactoring Operation Descriptor</uicontrol>
      template.</p>
    <section id="introduction_to_the_descriptor_file">
      <title>Introduction to the Descriptor File</title>
      <p id="p_ug1_cgk_54b">This descriptor file root element specifies required attributes to
        define the operation <xmlatt>name</xmlatt>, <xmlatt>description</xmlatt>, and
          <xmlatt>id</xmlatt> which are necessarily when loading an XML Refactoring operation. It
        also contains the path to the <xref
          href="custom_operation_sample_xquery.dita#custom_operation_sample_xquery">XQuery Update
          script</xref> or <xref href="custom_operation_sample.dita#custom_operation_sample">XSLT
          stylesheet</xref> that is associated with the particular operation through the
          <xmlelement>script</xmlelement> element.</p>
      <p>The optional <xmlatt>filesFilter</xmlatt> attribute can be specified to filter the
        resources by using a file pattern or list of file patterns separated by a comma (for
        example: <codeph>filesFilter="*.dita, *.xml"</codeph>). When set, its value is automatically
        populated in the <xref
          href="refactoring-xml-documents.dita#refactoring-xml-documents/dlentry_ayz_bgk_54b"
            ><uicontrol>Include files</uicontrol> field within the <uicontrol>Scope and
            Filters</uicontrol> wizard page</xref> as a default value.</p>
      <p id="p_vg1_cgk_54b">You can specify a <i>category</i> for your custom operations to logically group certain
        operations. The <xmlelement>category</xmlelement> element is optional and if it is not
        included in the descriptor file, the default name of the category for the custom operations
        is <i>Other operations</i>. </p>
      <p id="p_wg1_cgk_54b">The descriptor file is edited and validated against the following schema:
          <filepath>frameworks/xml_refactoring/operation_descriptor.xsd</filepath>. </p>
    </section>
    <section id="declaring_parameters_in_the_descriptor_file">
      <title>Declaring Parameters in the Descriptor File</title>
      <p id="p_xg1_cgk_54b">If the XQuery Update script or XSLT stylesheet includes parameters, they
        should be declared in the <uicontrol>parameters</uicontrol> section of the descriptor file.
        All the parameters specified in this section of the descriptor file will be displayed in the
          <uicontrol>XML Refactoring</uicontrol> tool within <xref
          href="refactoring-xml-documents.dita#refactoring-xml-documents/parameters_dlentry">the
            <uicontrol>Configure Operation Parameters</uicontrol> wizard page</xref> for that
        particular operation.</p>
      <p id="p_yg1_cgk_54b">The value of the first <xmlelement>description</xmlelement> element in the
          <xmlelement>parameters</xmlelement> section will be displayed at the top of <xref
          href="refactoring-xml-documents.dita#refactoring-xml-documents/parameters_dlentry">the
            <uicontrol>Configure Operation Parameters</uicontrol> wizard page</xref>.</p>
      <p id="p_zg1_cgk_54b">To declare a parameter, specify the following information:</p>
      <ul id="ul_irs_glv_gr">
        <li id="li_ah1_cgk_54b" irina="irina"><uicontrol>label</uicontrol> - This value is displayed in the user
          interface for the parameter.</li>
        <li id="li_bh1_cgk_54b" irina="irina"><uicontrol>name</uicontrol> - The parameter name used in the XQuery
          Update script or XSLT stylesheet and it should be the same as the one declared in the
          script.</li>
        <li id="li_ch1_cgk_54b" irina="irina"><uicontrol>type</uicontrol> - Defines the type of the parameter and
          how it will be rendered. There are several types available:<ul id="ul_xm5_j4v_gr">
            <li id="li_dh1_cgk_54b" irina="irina"><uicontrol>TEXT</uicontrol> - Generic type used to specify a
              simple text fragment.</li>
            <li id="li_eh1_cgk_54b" irina="irina"><uicontrol>XPATH</uicontrol> - Type of parameter whose value is
              an XPATH expression. For this type of parameter, <ph keyref="product"/> will use a
              text input with corresponding content completion and syntax highlighting.<note
                id="note_fh1_cgk_54b">The value of this parameter is transferred as plain text to
                the XQuery Update or XSLT transformation without being evaluated. You should
                evaluate the XPath expression inside the XQuery Update script or XSLT stylesheet.
                For example, you could use the <codeph>saxon:evaluate</codeph> Saxon extension
                function. </note><note id="note_gh1_cgk_54b">A relative XPath expression is
                converted to an absolute XPath expression by adding <codeph>//</codeph> before it
                  (<codeph>//XPathExp</codeph>). This conversion is done before transferring the
                XPath expression to the XML refactoring engine.</note><note id="note_hh1_cgk_54b"
                >When writing XPath expressions, you can only use prefixes declared in the <xref
                  href="preferences-xpath.dita"><menucascade>
                    <uicontrol>Options</uicontrol>
                    <uicontrol>Preferences</uicontrol>
                    <uicontrol>XML</uicontrol>
                    <uicontrol>XSLT-XQuery</uicontrol>
                    <uicontrol>XPath</uicontrol>
                  </menucascade></xref> options page.</note></li>
            <li id="li_ih1_cgk_54b" irina="irina"><uicontrol>NAMESPACE</uicontrol> - Used for editing namespace
              values.</li>
            <li id="li_jh1_cgk_54b" irina="irina"><uicontrol>REG_EXP_FIND</uicontrol> - Used when you want to
              match a certain text by using Perl-like regular expressions.</li>
            <li id="li_kh1_cgk_54b" irina="irina"><uicontrol>REG_EXP_REPLACE</uicontrol> - Used along with
                <codeph>REG_EXP_FIND</codeph> to specify the replacement string.</li>
            <li id="li_lh1_cgk_54b" irina="irina"><uicontrol>XML_FRAGMENT</uicontrol> - This type is used when you
              want to specify an XML fragment. For this type, <ph keyref="product"/> will display a
              text area specialized for inserting XML documents.</li>
            <li id="li_mh1_cgk_54b" irina="irina"><uicontrol>NC_NAME</uicontrol> - The parameter for
                <codeph>NC_NAME</codeph> values. It is useful when you want to specify the local
              part of a <xref keyref="glossentry_qname"><term>QName</term></xref> for an element or
              attribute.</li>
            <li id="li_nh1_cgk_54b" irina="irina"><uicontrol>BOOLEAN</uicontrol> - Used to edit boolean
              parameters.</li>
            <li id="li_oh1_cgk_54b" irina="irina"><uicontrol>TEXT_CHOICE</uicontrol> - It is useful for parameters
              whose value should be from a list of possible values. <ph keyref="product"/> renders
              each possible value as a radio button option.</li>
          </ul></li>
        <li irina="irina"><uicontrol>optional</uicontrol> - Specifies whether the parameter is optional or
          required. For optional parameters, the end user is not required to fill in a value in the
          XML refactoring wizard.</li>
        <li id="li_ph1_cgk_54b" irina="irina"><uicontrol>description</uicontrol> - The description of the
          parameter. It is used by the application to display a tooltip when you hover over the
          parameter.</li>
        <li id="li_qh1_cgk_54b" irina="irina"><uicontrol>possibleValues</uicontrol> - Contains the list with
          possible values for the parameter and you can specify the default value, as in the
          following
            example:<codeblock outputclass="language-xml" id="codeblock_rh1_cgk_54b">&lt;possibleValues onlyPossibleValuesAllowed="true">
    &lt;value name="before">Before&lt;/value>
    &lt;value name="after" default="true"&gt;After&lt;/value>
    &lt;value name="firstChild">First child&lt;/value>
    &lt;value name="lastChild">Last child&lt;/value>
&lt;/possibleValues></codeblock><p>On a <xmlelement>value</xmlelement>, you can specify
            the <xmlatt>default</xmlatt> attribute with the value <codeph>true</codeph> to mark it
            as the default presented value in the XML refactoring wizard. The text specified inside
            the <xmlelement>value</xmlelement> element is displayed as placeholder default text in
            the text entry box. If the dialog box is accepted with the placeholder text in place,
            the <xmlatt>name</xmlatt> attribute value is passed to the refactoring script.
            Example:<codeblock id="codeblock_opc_d4j_nwb" outputclass="language-xml">&lt;value name="my-actual-default-value" default="true">[default displayed]&lt;/value> </codeblock></p></li>
      </ul>
    </section>
    <section id="specialized_parameters_to_match_elements_or_attri">
      <title>Specialized Parameters to Match Elements or Attributes</title>
      <p id="p_sh1_cgk_54b">If you want to match elements or attributes, you can use some specialized parameters, in
        which case <ph keyref="product"/> will propose all declared elements or attributes based on
        the schema associated with the currently edited file. The following specialized parameters
        are supported:<dl id="dl_th1_cgk_54b">
          <dlentry id="dlentry_uh1_cgk_54b">
            <dt>elementLocation</dt>
            <dd>
              <p id="p_vh1_cgk_54b">This parameter is used to match elements. For this type of
                parameter, the application displays a text field where you can enter the element
                name or an XPath expression. The text from the <xmlatt>label</xmlatt> attribute is
                displayed in the application as the label of the text field. The
                  <xmlatt>name</xmlatt> attribute is used to specify the name of the parameter from
                the XQuery Update script or XSLT stylesheet. If the value of the
                  <xmlatt>useCurrentContext</xmlatt> attribute is set to
                <uicontrol>true</uicontrol>, the element name from the cursor position is used as
                proposed values for this parameter.</p>
              <p id="p_wh1_cgk_54b">Example of an
                <xmlelement>elementLocation</xmlelement>:<codeblock outputclass="language-xml" id="codeblock_xh1_cgk_54b">&lt;elementLocation name="elem_loc" useCurrentContext="false">
                &lt;element label="Element location">
                    &lt;description>Element location description.&lt;/description>
                &lt;/element>
&lt;/elementLocation></codeblock></p>
            </dd>
          </dlentry>
          <dlentry id="dlentry_yh1_cgk_54b">
            <dt>attributeLocation</dt>
            <dd>
              <p id="p_zh1_cgk_54b">This parameter is used to match attributes. For this type of parameter, the
                application displays two text fields where you can enter the parent element name and
                the attribute name (both text fields accept XPath expressions for a finer match).
                The text from the <xmlatt>label</xmlatt> attributes is displayed in the application
                as the label of the associated text fields. The <xmlatt>name</xmlatt> attribute is
                used to specify the name of the parameter from the XQuery Update script or XSLT
                stylesheet. The value of this parameter is an XPath expression that is computed by
                using the values of the expression from the <i>element</i> and <i>attribute</i> text
                fields. For example, if <userinput>section</userinput> is entered for the element
                and a <userinput>title</userinput> is entered for the attribute, the XPath
                expression would be computed as <codeph>//section/@title</codeph>. If the value of
                the <codeph>useCurrentContext</codeph> attribute is set to
                  <userinput>true</userinput>, the element and attribute name from the cursor
                position is used as proposed values for the operation parameters.</p>
              <p id="p_a31_cgk_54b">Example of an
                <xmlelement>attributeLocation</xmlelement>:<codeblock outputclass="language-xml" id="codeblock_b31_cgk_54b">&lt;attributeLocation name="attr_xpath" useCurrentContext="true">
                &lt;element label="Element path">
                    &lt;description>Element path description.&lt;/description>
                &lt;/element>
                &lt;attribute label="Attribute" >
                    &lt;description>Attribute path description.&lt;/description>
                &lt;/attribute>
&lt;/attributeLocation></codeblock></p>
            </dd>
          </dlentry>
          <dlentry id="dlentry_c31_cgk_54b">
            <dt>elementParameter</dt>
            <dd>
              <p id="p_d31_cgk_54b">This parameter is used to specify elements by local name and
                namespace. For this type of parameter, the application displays two combo boxes with
                elements and namespaces collected from the associated schema of the currently edited
                file. The text from the <xmlatt>label</xmlatt> attribute is displayed in the
                application as label of the associated combo. The <xmlatt>name</xmlatt> attribute is
                used to specify the name of the parameter from the XQuery Update script or XSLT
                stylesheet. If you specify the <xmlatt>allowsAny</xmlatt> attribute, the application
                will propose <i>&lt;ANY></i> as a possible value for the <uicontrol>Name</uicontrol>
                and <uicontrol>Namespace</uicontrol> combo boxes. You can also use the
                  <xmlatt>useCurrentContext</xmlatt> attribute and if its value is set to
                  <userinput>true</userinput>, the element name and namespace from the cursor
                position is used as proposed values for the operation parameters.</p>
              <p id="p_e31_cgk_54b">Example of an
                <xmlelement>elementParameter</xmlelement>:<codeblock outputclass="language-xml" id="codeblock_f31_cgk_54b">&lt;elementParameter id="elemID" useCurrentContext="true">
    &lt;localName label="Name" name="element_localName" allowsAny="true">
        &lt;description>Local name of the parent element.&lt;/description>           
    &lt;/localName>
    &lt;namespace label="Namespace" name="element_namespace" allowsAny="true">
        &lt;description>Local name of the parent element&lt;/description>           
    &lt;/namespace>        
&lt;/elementParameter></codeblock></p>
            </dd>
          </dlentry>
          <dlentry id="dlentry_g31_cgk_54b">
            <dt>attributeParameter</dt>
            <dd>
              <p id="p_h31_cgk_54b">This parameter is used to specify attributes by local name and namespace. For this
                type of parameter, the application displays two combo boxes with attributes and
                their namespaces collected from the associated schema of the currently edited file.
                The text from the <xmlatt>label</xmlatt> attribute is displayed in the application
                as the label of the associated combo box. You can also use the
                  <xmlatt>useCurrentContext</xmlatt> attribute and if its value is set to
                  <userinput>true</userinput>, the attribute name and namespace from the cursor
                position is used as proposed values for the operation parameters.<note id="note_i31_cgk_54b">An
                    <xmlelement>attributeParameter</xmlelement> is dependant upon an
                    <xmlelement>elementParameter</xmlelement>. The list of attributes and namespaces
                  are computed based on the selection in the <i>elementParameter</i> combo
                  boxes.</note></p>
              <p id="p_j31_cgk_54b">Example of an
                <xmlelement>attributeParameter</xmlelement>:<codeblock outputclass="language-xml" id="codeblock_k31_cgk_54b">&lt;attributeParameter dependsOn="elemID" useCurrentContext="true">
    &lt;localName label="Name" name="attribute_localName">
        &lt;description>The name of the attribute to be converted.&lt;/description>
    &lt;/localName>
    &lt;namespace label="Namespace" name="attribute_namespace" allowsAny="true">
        &lt;description>Namespace of the attribute to be converted.&lt;/description>
    &lt;/namespace>        
&lt;/attributeParameter> </codeblock></p>
            </dd>
          </dlentry>
        </dl></p>
    </section>
    <section id="section_bdm_dd5_bwb">
      <title>Grouping Parameters in the Descriptor File</title>
      <p id="p_cdm_dd5_bwb">You can use <xmlelement>section</xmlelement> elements to group related
        parameters in the descriptor
        file:<codeblock outputclass="language-xml">&lt;section label="Parent element">
  &lt;elementParameter id="elemID">
    &lt;localName label="Name" name="element_localName" allowsAny="true">
      &lt;description>Local name of the parent element.&lt;/description>            
    &lt;/localName>
    &lt;namespace label="Namespace" name="element_namespace" allowsAny="true">
      &lt;description>Local name of the parent element&lt;/description>            
    &lt;/namespace>        
  &lt;/elementParameter>
&lt;/section></codeblock></p>
    </section>
    <note id="note_l31_cgk_54b">All built-in operations are loaded from the <filepath><term
          conkeyref="reusables-user-guide/oxy-install-dir"/>/refactoring</filepath> folder.</note>
  </body>
  <related-links>
      <link href="custom_operation_sample.dita#custom_operation_sample/descriptor-example-section">
        <linktext>Example of an Operation Descriptor File with an XSLT Stylesheet</linktext>
      </link>
      <link
        href="custom_operation_sample_xquery.dita#custom_operation_sample_xquery/descriptor-example-section">
        <linktext>Example of an Operation Descriptor File with an XQuery Update script</linktext>
      </link>
  </related-links>
</topic>
