<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="xslt-refactoring-actions">
  <title>XSLT Refactoring Actions</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>XSLT<indexterm>Refactoring actions</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p id="p_t1b_cgk_54b"><ph keyref="product"/> offers a set of actions that allow you to change the structure of an
      XSLT stylesheet without changing the results of running it in an XSLT transformation.
      Depending on the selected text, the following XSLT refactoring actions are available from the
        <uicontrol>Refactoring</uicontrol> submenu of the contextual menu<ph
        product="developer editor"> (or from the <menucascade>
          <uicontrol>Document</uicontrol>
          <uicontrol>Refactoring</uicontrol>
        </menucascade> menu)</ph>:</p>
    <p id="p_u1b_cgk_54b">
      <dl id="dl_v1b_cgk_54b">
        <dlentry id="dlentry_w1b_cgk_54b">
          <dt><uicontrol><image href="../img/CreateTemplate16.png" id="image_ptf_4fn_wr"/>Extract
              template</uicontrol> (Active only when the selection contains well-formed
            elements)</dt>
          <dd><ph conkeyref="reusables-editing-documents/extract_template_short_desc"/> It opens a
            dialog box that allows you to specify the name of the new template to be created. The
            possible changes to perform on the document can be previewed before altering the
            document. After pressing OK, the template is created and the selection is replaced with
            the <xmlelement>xsl:call-template</xmlelement> instruction referencing the newly created
              template.<note id="note_x1b_cgk_54b">The newly created template is indented and its name is highlighted in
              the <xmlelement>xsl:call-template</xmlelement> element.</note></dd>
        </dlentry>
        <dlentry id="dlentry_y1b_cgk_54b">
          <dt><uicontrol><image href="../img/XSLCreateFunction16.png"/>Extract
            function</uicontrol></dt>
          <dd>Extracts the selected XSLT instructions sequence into a new function. It opens a
            dialog box that allows you to specify the name of the new function. It then moves the
            selected lines to a newly created XSLT function and inserts a function call in the place
            of the selected lines. XPath expressions are rebuilt based on the current context and
            the context is passed as parameters in the new functions. You can also use parts of an
            XPath expression to create the new functions.</dd>
        </dlentry>
        <dlentry id="dlentry_z1b_cgk_54b">
          <dt><uicontrol><image href="../img/XSLCreateLocalVariable16.png"/>Create local
              variable</uicontrol></dt>
          <dd>Creates an XSLT variable, wrapped around the selection. It opens a dialog box that
            allows you to specify the name of the new variable. It then wraps the selection in the
            variable and you can reference it at anytime in the code.</dd>
        </dlentry>
        <dlentry id="dlentry_abb_cgk_54b">
          <dt><uicontrol><image href="../img/CreateStylesheet16.png" id="image_dwx_gfn_wr"/>Move to
              another stylesheet</uicontrol> (Active only when entire components are selected)</dt>
          <dd><ph conkeyref="reusables-editing-documents/move_to_another_stylesheet_short_desc"/> It
            opens a dialog box that allows you to specify where the selected components will be
            moved to. Follow these steps when using the dialog box:<ol id="ul_u1t_d3b_c4">
              <li id="li_bbb_cgk_54b" irina="irina">Choose whether you want to move the selected components to a new stylesheet or an
                existing one.</li>
              <li id="li_cbb_cgk_54b" irina="irina">If you choose to move the components to an existing one, select the destination
                stylesheet. Click the <uicontrol>Choose</uicontrol> button to select the destination
                stylesheet file. <ph keyref="product"/> will automatically check if the destination
                stylesheet is already contained by the hierarchy of the current stylesheet. If it is
                not contained, choose whether or not the destination stylesheet will be referenced
                (imported or included) from the current stylesheet. The following options are
                  available:<ul id="ul_byx_fhb_c4">
                  <li id="li_dbb_cgk_54b" irina="irina"><uicontrol>Include</uicontrol> - The current stylesheet will use an
                      <xmlelement>xsl:include</xmlelement> instruction to reference the destination
                    stylesheet.</li>
                  <li id="li_ebb_cgk_54b" irina="irina"><uicontrol>Import</uicontrol> - The current stylesheet will use an
                      <xmlelement>xsl:import</xmlelement> instruction to reference the destination
                    stylesheet.</li>
                  <li id="li_fbb_cgk_54b" irina="irina"><uicontrol>None</uicontrol> - There will be created no relation between the
                    current and destination stylesheets.</li>
                </ul></li>
              <li id="li_gbb_cgk_54b" irina="irina">Click the <uicontrol>Move</uicontrol> button to move the components to the
                destination. The moved components are highlighted in the destination
                stylesheet.</li>
            </ol></dd>
        </dlentry>
        <dlentry id="xsl-attributes-to-attributes">
          <dt><uicontrol>Convert attributes to xsl:attributes</uicontrol></dt>
          <dd>
            <p id="p_hbb_cgk_54b">Converts the attributes from the selected element and represents each of them with an
                <xmlelement>xsl:attribute</xmlelement> instruction. For example, the following
              element:<codeblock outputclass="language-xml" id="codeblock_ibb_cgk_54b">&lt;person id="Big{test}Boss"/></codeblock></p>
            <p id="p_jbb_cgk_54b">is converted
              to:<codeblock outputclass="language-xml" id="codeblock_kbb_cgk_54b">&lt;person>
    &lt;xsl:attribute name="id">
        &lt;xsl:text>Big&lt;/xsl:text>
        &lt;xsl:value-of select="test"/>
        &lt;xsl:text>Boss&lt;/xsl:text>
    &lt;/xsl:attribute>
&lt;/person></codeblock></p>
          </dd>
        </dlentry>
        <dlentry id="convert-xsl-if-to-xsl-choose">
          <dt><uicontrol>Convert xsl:attributes to attributes</uicontrol></dt>
          <dd>
            <p id="p_lbb_cgk_54b">Converts <xmlelement>xsl:attribute</xmlelement> elements to inline attributes for
              elements outside the XSL namespace. For example, the following element: It is the
              reverse of the <uicontrol>Convert attributes to xsl:attributes</uicontrol> action with
              the following limitations:<ul id="ul_bsv_mhb_1jb">
                <li id="li_mbb_cgk_54b" irina="irina">The <xmlelement>xsl:attribute</xmlelement> element is "text only".</li>
                <li id="li_nbb_cgk_54b" irina="irina">The <xmlelement>xsl:attribute</xmlelement> element has a single
                    <xmlelement>xsl:text</xmlelement> child element.</li>
                <li id="li_obb_cgk_54b" irina="irina">The <xmlelement>xsl:attribute</xmlelement> element has a single
                    <xmlelement>xsl:value-of</xmlelement> child element. In this case, the value of
                  the attribute will be the XPath expression from the <xmlatt>select</xmlatt>
                  attribute surrounded by curly brackets (<i>text value template</i>).</li>
              </ul><codeblock outputclass="language-xml" id="codeblock_pbb_cgk_54b">&lt;person>
  &lt;xsl:attribute name="id">john.doe&lt;/xsl:attribute>
  &lt;xsl:attribute name="email">&lt;xsl:text>john.doe@example.com&lt;/xsl:text>
  &lt;/xsl:attribute>
  &lt;xsl:attribute name="manager">&lt;xsl:value-of select="person[@id='boss']/name"/>
  &lt;/xsl:attribute>
&lt;/person></codeblock></p>
            <p id="p_qbb_cgk_54b">is converted
              to:<codeblock outputclass="language-xml" id="codeblock_rbb_cgk_54b">&lt;person id="john.doe" email="john.doe@example.com" manager="{person[@id='boss']/name}"/></codeblock></p>
          </dd>
        </dlentry>
        <dlentry id="dlentry_sbb_cgk_54b">
          <dt><uicontrol>Convert xsl:if into xsl:choose/xsl:when</uicontrol></dt>
          <dd>
            <p id="p_tbb_cgk_54b">Converts one or more <xmlelement>xsl:if</xmlelement> element blocks into one or more
                <xmlelement>xsl:when</xmlelement> blocks surrounded by an
                <xmlelement>xsl:choose</xmlelement> element. If it is invoked on a selection, the
              selection must contain a well-formed fragment. If there is no selection, the
                <xmlelement>xsl:if</xmlelement> element that surrounds the content at the current
              cursor position is converted.</p>
            <p id="p_ubb_cgk_54b">For example, the following
              block:<codeblock outputclass="language-xml" id="codeblock_vbb_cgk_54b">&lt;xsl:if test="a">
  &lt;!-- XSLT code -->
&lt;/xsl:if></codeblock></p>
            <p id="p_wbb_cgk_54b">is converted
              to:<codeblock outputclass="language-xml" id="codeblock_xbb_cgk_54b">&lt;xsl:choose>
    &lt;xsl:when test="a">
        &lt;!-- XSLT code -->
    &lt;/xsl:when>
    &lt;xsl:otherwise>
        |
    &lt;/xsl:otherwise>
&lt;/xsl:choose></codeblock></p>
            <p id="p_ybb_cgk_54b">where the <codeph>|</codeph> character is the current cursor position.</p>
          </dd>
        </dlentry>
        <dlentry id="dlentry_zbb_cgk_54b">
          <dt><uicontrol>Convert xsl:choose/xsl:when into xsl:if</uicontrol></dt>
          <dd>
            <p id="p_acb_cgk_54b">Converts each <xmlelement>xsl:when</xmlelement> block into an
                <xmlelement>xsl:if</xmlelement> block. For the
                <xmlelement>xsl:otherwise</xmlelement> branch, it also adds an <i>and</i> statement
              to each negated form of the conditions. For example, the following
              block:<codeblock outputclass="language-xml" id="codeblock_bcb_cgk_54b">&lt;xsl:choose>
    &lt;xsl:when test="c1">
        &lt;!-- XSLT statement 1 -->
    &lt;/xsl:when>
    &lt;xsl:when test="c2">
        &lt;!-- XSLT statement 2 -->
    &lt;/xsl:when>
    &lt;xsl:when test="c3">
        &lt;!-- XSLT statement 3 -->
    &lt;/xsl:when>
    &lt;xsl:otherwise>
        &lt;!-- XSLT "otherwise" statement-->
    &lt;/xsl:otherwise>
&lt;/xsl:choose></codeblock></p>
            <p id="p_ccb_cgk_54b">is converted
              to:<codeblock outputclass="language-xml" id="codeblock_dcb_cgk_54b">&lt;xsl:if test="c1">
    &lt;!-- XSLT statement 1 -->
&lt;/xsl:if>
&lt;xsl:if test="c2">
    &lt;!-- XSLT statement 2 -->
&lt;/xsl:if>
&lt;xsl:if test="c3">
    &lt;!-- XSLT statement 3 -->
&lt;/xsl:if>
&lt;xsl:if test="not(c1) and not(c2) and not(c3)">
    &lt;!-- XSLT "otherwise" statement-->
&lt;/xsl:if></codeblock></p>
          </dd>
        </dlentry>
        <dlentry id="dlentry_ecb_cgk_54b">
          <dt><uicontrol><image href="../img/XSLLocalVariable16.png"/>Extract local
              variable</uicontrol> (Active on a selection made inside an attribute that contains an
            XPath expression)</dt>
          <dd><ph conkeyref="reusables-editing-documents/extract_local_var_sh_desc"/> After creating
            the new local variable before the current element, <ph keyref="product"/> allows you to
            edit the name of the variable.</dd>
        </dlentry>
        <dlentry id="dlentry_fcb_cgk_54b">
          <dt><uicontrol><image href="../img/XSLVariable16.png"/>Extract global variable</uicontrol>
            (Active on a selection made inside an attribute that contains an XPath expression)</dt>
          <dd><ph conkeyref="reusables-editing-documents/extract_global_var_sh_desc"/> After
            creating the new global variable, <ph keyref="product"/> allows you to edit the name of
            the variable.<note id="note_gcb_cgk_54b"><ph keyref="product"/> checks if the selected expression depends on
              local variables or parameters that are not available in the global context where the
              new variable is created.</note></dd>
        </dlentry>
        <dlentry id="dlentry_hcb_cgk_54b">
          <dt><uicontrol><image href="../img/XSLLocalParam16.png"/>Extract template
              parameter</uicontrol> (Active on a selection made inside an attribute that contains an
            XPath expression)</dt>
          <dd><ph conkeyref="reusables-editing-documents/extract_templ_param_sh_desc"/> After
            creating the new parameter, <ph keyref="product"/> allows you to edit the name of the
            parameter.</dd>
        </dlentry>
        <dlentry id="dlentry_icb_cgk_54b">
          <dt><uicontrol><image href="../img/XSLParam16.png"/>Extract global parameter</uicontrol>
            (Active on a selection made inside an attribute that contains an XPath expression)</dt>
          <dd><ph conkeyref="reusables-editing-documents/extract_global_param_sh_desc"/> After
            creating the new parameter, <ph keyref="product"/> allows you to edit the name of the
                parameter.<note id="note_jcb_cgk_54b"><ph keyref="product"/> checks if the selected expression depends on
              local variables or parameters that are not available in the global context where the
              new parameter is created.</note></dd>
        </dlentry>
        <dlentry conkeyref="reusables-search-refactoring-actions/rename-component-li" id="dlentry_kcb_cgk_54b">
          <dt/>
          <dd/>
        </dlentry>
        <dlentry conkeyref="reusables-search-refactoring-actions/rename-component-in-li" id="dlentry_lcb_cgk_54b">
          <dt/>
          <dd/>
        </dlentry>
      </dl>
    </p>
    <note id="note_mcb_cgk_54b">Many of these refactoring actions are also proposed by the <xref
        href="xslt-quick-assist.dita#xslt-quick-assist"><term>Quick Assist</term>
      support</xref>.</note>
    <section id="section_epn_y52_w5b">
      <title>Resources</title>
      <p id="p_ncb_cgk_54b">For more information about XSLT refactoring, watch our video
        demonstration:</p>
      <p id="p_ocb_cgk_54b"><object width="450" height="250"
          data="https://www.youtube.com/embed/4ir5XWyp8Zo" outputclass="iframe">
          <param name="allowfullscreen" value="true"/>
        </object></p>
    </section>
  </body>
</topic>
