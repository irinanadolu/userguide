<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="import-dynamic-conversions">
  <title>Import Content Dynamically</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Import data dynamically</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p id="p_l1z_cgk_54b">Along with the built-in support for various useful URL protocols (such as HTTP or FTP), <ph
        keyref="product"/> also provides special support for a <i>convert</i> protocol that can be
      used to chain predefined processors to dynamically import content from various sources.</p>
    <note type="important">Starting with version 26, the dynamic conversion protocol is disabled by
      default. To enable it, you must set the
        <codeph>com.oxygenxml.enable.convert.url.protocol</codeph>
      <xref
        href="set-parameters-for-application-launchers.dita#set-parameters-for-application-launchers/setting-a-system-property"
        product="author developer editor">system property</xref><ph
        product="authorEclipse developerEclipse editorEclipse">system property</ph> to the value of
        <codeph>true</codeph>.</note>
    <p id="p_m1z_cgk_54b">A <i>dynamic conversion URL</i> chains various processors that can be applied, in
      sequence, on a target resource and has the following general syntax:</p>
    <p id="p_n1z_cgk_54b">
      <codeblock outputclass="language-ini" id="codeblock_o1z_cgk_54b">convert:/processor=xslt;ss=urn:processors:excel2d.xsl/processor=excel!/urn:files:my.xls</codeblock>
    </p>
    <p id="p_p1z_cgk_54b">The previous example first applies a processor (<codeph>excel</codeph>) on a target
      identified by the identifier (<filepath>urn:files:sample.xls</filepath>) and converts the <tm
        tmtype="tm">Excel</tm> resource to XML. The second applied processor (<codeph>xslt</codeph>)
      applies an XSLT stylesheet identified using the identifier
        (<filepath>urn:processors:excel2d.xsl</filepath>) over the resulting content from the first
      applied processor. These identifiers are all mapped to real resources on disk via an <term>XML
        catalog</term> that is configured in the application, as in the following
      example:<codeblock outputclass="language-xml" id="codeblock_q1z_cgk_54b">&lt;catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">
  &lt;rewriteURI uriStartString="urn:files:" rewritePrefix="./resources/"/>
  &lt;rewriteURI uriStartString="urn:processors:" rewritePrefix="./processors/"/>
&lt;/catalog></codeblock></p>
    <p id="p_r1z_cgk_54b">The target resource part of the conversion URL must always follow the <codeph>!/</codeph>
      pattern. It can be any of the following:<ul id="ul_hbw_t3j_25">
        <li id="li_s1z_cgk_54b" irina="irina">An absolute URL that points to a resource.</li>
        <li id="li_t1z_cgk_54b" irina="irina">An identifier that will be resolved to an actual resource via the <xref
            keyref="glossentry_xml-catalog"><term>XML Catalog</term></xref> support in the
          application. In the example above, the <b>urn:files:sample.xls</b> target resource is
          resolved via the <term>XML catalog</term>.</li>
        <li id="li_u1z_cgk_54b" irina="irina">
          <p id="p_v1z_cgk_54b">A relative location. This location can only be resolved to an actual resource URL when
            the application has enough information about the location where the URL is
            referenced.</p>
          <p id="p_w1z_cgk_54b"><i>For example</i>, for a <xref keyref="glossentry_ditamap"><term>DITA
              map</term></xref> with a <xmlelement>topicref</xmlelement> such
            as:<codeblock outputclass="language-xml" id="codeblock_x1z_cgk_54b">&lt;topicref href="convert:/.../processor=excel!/resources/sample.xls"/></codeblock>the
              <filepath>resources/sample.xls</filepath> path will be resolved relative to the
              <term>DITA map</term> location.</p>
        </li>
      </ul></p>
    <p id="p_y1z_cgk_54b">This type of URL can be opened in the application by using the <uicontrol>Open
        URL</uicontrol> action from the <uicontrol>File</uicontrol> menu. It can also be referenced
      from existing XML resources via <i>xi:include</i> or as a topic reference from a
        <term>DITA map</term>.</p>
    <p id="p_z1z_cgk_54b">A <i>GitHub</i> project that contains various dynamic conversion samples for producing DITA
      content from various sources (and then publishing it) can be found here: <xref
        href="https://github.com/oxygenxml/dita-glass" format="html" scope="external"/>.</p>
    <section id="conversion_processors">
      <title>Conversion Processors</title>
      <p id="p_abz_cgk_54b">A set of predefined conversion processors is provided in <ph keyref="product"/>. Each
        processor has its own parameters that can be set to control the behavior of the conversion
        process. All parameters that are resolved to resources are passed through the <term>XML
          catalog</term> mapping.</p>
      <p id="p_bbz_cgk_54b">The following predefined conversion processors are included:<ul id="ul_r4y_5x2_mr">
          <li id="li_cbz_cgk_54b" irina="irina"><b><codeph>xslt</codeph> Processor</b> - Converts an XML input using the Saxon EE XSLT
            processor. The <codeph>ss</codeph> parameter indicates the stylesheet resource to be
            loaded. All other specified parameters will be set as parameters to the XSLT
            transformation.<codeblock outputclass="language-ini" id="codeblock_dbz_cgk_54b">convert:/processor=xslt;ss=urn:processors:convert.xsl;p1=v1!/urn:files:sample.xml</codeblock></li>
          <li id="li_ebz_cgk_54b" irina="irina"><b><codeph>xquery</codeph> Processor</b> - Converts an XML input using the Saxon EE
            XQuery processor. The <codeph>ss</codeph> parameter indicates the XQuery script to be
            loaded. All other specified parameters will be set as parameters to the XSLT
            transformation.<codeblock outputclass="language-ini" id="codeblock_fbz_cgk_54b">convert:/processor=xquery;ss=urn:processors:convert.xquery;p1=v1!/urn:files:sample.xml</codeblock></li>
          <li id="li_gbz_cgk_54b" irina="irina"><b><codeph>excel</codeph> Processor</b> - Converts an <tm tmtype="tm">Excel</tm> input
            to an XML format that can later be converted by other piped processors. It has a single
            parameter <codeph>sn</codeph>, which indicates the name of the sheet that needs to be
            converted. If this parameter is missing, the XML will contain the combined content of
            all sheets included in the <tm tmtype="tm">Excel</tm> document.
            <codeblock outputclass="language-ini" id="codeblock_hbz_cgk_54b">convert:/processor=excel;sn=test!/urn:files:sample.xls</codeblock></li>
          <li id="li_ibz_cgk_54b" irina="irina"><b><codeph>java</codeph> Processor</b> - Converts an input to another format by
            applying a specific Java method. The <codeph>jars</codeph> parameter is a
            comma-separated list of <xref keyref="glossentry_jar"><term>JAR</term></xref> libraries,
            or folders that libraries will be loaded from. The <codeph>ccn</codeph> parameter is the
            fully qualified name of the conversion class that will be instantiated. The conversion
            class needs to have a method with the following
            signature:<codeblock outputclass="language-java" id="codeblock_jbz_cgk_54b">  public void convert(String systemID, String originalSourceSystemID,
 InputStream is, OutputStream os, LinkedHashMap&lt;String, String> properties)
 throws IOException </codeblock><codeblock outputclass="language-ini" id="codeblock_kbz_cgk_54b">convert:/processor=java;jars=libs;ccn=test.JavaToXML!/
urn:files:java/WSEditorBase.java</codeblock></li>
          <li id="li_lbz_cgk_54b" irina="irina"><b><codeph>js</codeph> Processor</b> - Converts an input to another format by applying
            a JavaScript method. The <codeph>js</codeph> parameter indicates the script that will be
            used. The <codeph>fn</codeph> parameter is the name of the method that will be called
            from the script. The method must take a string as an argument and return a string. If
            any of the parameters are missing, an error is thrown and the conversion
            stops.<codeblock outputclass="language-ini" id="codeblock_mbz_cgk_54b">convert:/processor=js;js=urn:processors:md.js;fn=convertExternal!/urn:files:sample.md</codeblock></li>
          <li id="li_nbz_cgk_54b" irina="irina"><b><codeph>json</codeph> Processor</b> - Converts a JSON input to XML. It has no
            parameters.<codeblock outputclass="language-ini" id="codeblock_obz_cgk_54b">convert:/processor=json!/urn:files:personal.json</codeblock></li>
          <li id="li_pbz_cgk_54b" irina="irina"><b><codeph>xhtml</codeph> Processor</b> - Converts HTML content to well-formed XHTML.
            It has no
            parameters.<codeblock outputclass="language-ini" id="codeblock_qbz_cgk_54b">convert:/processor=xhtml!/urn:files:test.html</codeblock></li>
          <li id="li_rbz_cgk_54b" irina="irina"><b><codeph>wrap</codeph> Processor</b> - Wraps content in a tag name making it
            well-formed XML. The <codeph>rn</codeph> parameter indicates the name of the root tag to
            use. By default, it is <codeph>wrapper</codeph>. The <codeph>encoding</codeph> parameter
            specifies the encoding that should be used to read the content. By default, it is
              <codeph>UTF8</codeph>. As an example, this processor can be used if you want to
            process a comma-separated values file with an XSLT stylesheet to produce XML content.
            The CSV file is first wrapped as well-formed XML, which is then processed with an
              <codeph>xslt</codeph>
            processor.<codeblock outputclass="language-ini" id="codeblock_sbz_cgk_54b">convert:/processor=wrap!/urn:files:test.csv</codeblock></li>
          <li id="li_tbz_cgk_54b" irina="irina"><b><codeph>cache</codeph> Processor</b> - Caches the converted content obtained from
            the original document to a temporary file. The cache will be used on subsequent uses of
            the same URL, thus increasing the speed for the application returning the converted
            content. If the original URL points to the local disk, the cache will be automatically
            invalidated when the original file content gets modified. Otherwise, if the original URL
            points to a remote resource, the cache will need to be invalidated by reloading
                (<uicontrol><image href="../img/Reload16.png" id="image_ckc_xr1_2nb"/>Reload
              (F5)</uicontrol> from the toolbar) the URL content that is opened in the editor.
            <codeblock outputclass="language-ini" id="codeblock_ubz_cgk_54b">convert:/processor=cache/processor=xslt;…..!/urn:files:test.csv</codeblock></li>
        </ul></p>
    </section>
    <section id="reverse_conversion_processors">
      <title>Reverse Conversion Processors</title>
      <p id="p_vbz_cgk_54b">All processors defined above can also be used for saving content back to the target
        resource if they are defined in the URL as reverse processors. Reverse processors are
        evaluated right to left. These reverse processors allow <i>round-tripping</i> content
        to and from the target resource.</p>
      <p id="p_wbz_cgk_54b">As an example, the following URL converts HTML to DITA when the URL is opened using the
          <filepath>h2d.xsl</filepath> stylesheet and converts DITA to HTML when the content is
        saved in the application using the <filepath>d2h.xsl</filepath> stylesheet.</p>
      <p id="p_xbz_cgk_54b">
        <codeblock outputclass="language-ini" id="codeblock_ybz_cgk_54b">convert:/processor=xslt;ss=h2d.xsl/rprocessor=xslt;ss=d2h.xsl!/urn:files:sample.html</codeblock>
      </p>
      <note type="important" id="note_zbz_cgk_54b">If you are publishing a <term>DITA map</term> that has such conversion
        URL references inside, you need to edit the transformation scenario and set the value of the
        parameter <i>fix.external.refs.com.oxygenxml</i> to <b>true</b>. This will instruct <ph
          keyref="product"/> to resolve such references during a special pre-processing stage.
        Depending on the conversion, you may also require additional libraries to be added using the
          <uicontrol>Libaries</uicontrol> button in the <uicontrol>Advanced</uicontrol> tab of the
        transformation scenario.</note>
    </section>
  </body>
  <related-links>
    <linklist><title>Related Information:</title><link format="html" href="https://github.com/oxygenxml/dita-glass" scope="external"/></linklist>
  </related-links>
</topic>
