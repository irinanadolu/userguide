<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="json-schema-component-properties">
  <title> JSON Schema Component Properties</title>
  <body>
    <table colsep="1" rowsep="1" frame="all" id="table_rjc_cgk_54b">
      <title>JSON Schema Diagram Component Properties</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Properties Group</entry>
            <entry>Property Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry dir="ltr" rowsep="0">Common Properties</entry>
            <entry dir="ltr"><uicontrol>type</uicontrol></entry>
            <entry>
              <p dir="ltr" id="p_pwc_sfc_prb">Specifies the type of data that the schema is
                expecting to validate. This keyword is not mandatory and the value must be a string
                representing a valid data type, or an array of strings representing a valid list of
                data types.</p>
              <p dir="ltr" id="p_qwc_sfc_prb">When specifying multiple types, their order is
                irrelevant to the validation process, but make sure that a data type is specified
                only once.</p>
            </entry>
          </row>
          <row>
            <entry morerows="7"/>
            <entry dir="ltr"><uicontrol>$ref</uicontrol></entry>
            <entry dir="ltr">An instance is valid against this keyword if it is valid against the
              schema that points to the location indicated in its value. The value must be a string
              representing a URI, URI reference, URI template, or JSON pointer.<note
                id="note_i15_rtb_15b"> A schema version <i>2019-09</i> or <i>2020-12</i> that
                contains a <codeph>$ref</codeph> in conjunction with other type-specific keywords
                (such as <i>properties</i> or <i>items</i>) is processed as a combined schema, under
                the <i>allOf</i> criterion. This means that for an instance to be valid, it has to
                validate against both the referenced schema and the schema defined in-place by those
                keywords.</note></entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>$id</uicontrol></entry>
            <entry dir="ltr">Specifies a unique ID for a document or a document sub-schema. The
              value must be a string representing a URI. All sub-schema IDs are resolved relative to
              the document ID. It is not a required keyword, but it is considered best practice to
              use it.</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>enum</uicontrol></entry>
            <entry dir="ltr">An instance validates against this keyword if its value can be found in
              the items defined by its value. The value must be an array that contains anything (an
              empty array is not allowed).</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>const</uicontrol></entry>
            <entry dir="ltr">An instance validates against this keyword if its value equals the
              value of this keyword. The value can be anything.</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>$comment</uicontrol></entry>
            <entry dir="ltr">Contains an observation about the schema. The value must be a
              string.</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>readOnly</uicontrol></entry>
            <entry dir="ltr">Used to mark specific properties as <i>read-only</i>.</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>writeOnly</uicontrol></entry>
            <entry dir="ltr">Used to mark specific properties as <i>write-only</i>.</entry>
          </row>
          <row>
            <entry><uicontrol>deprecated</uicontrol></entry>
            <entry>Used to indicate that the instance value is deprecated and should not be used
              since it might be removed in the future.</entry>
          </row>
          <row>
            <entry dir="ltr" rowsep="0">Object Properties</entry>
            <entry dir="ltr"><uicontrol>additionalProperties</uicontrol></entry>
            <entry>
              <p dir="ltr" id="p_rwc_sfc_prb">An object is valid against this keyword if all
                  <i>unchecked</i> properties are valid against the schema defined by its value.
                  <i>Unchecked</i> properties are the properties not checked by the
                  <uicontrol>properties</uicontrol> and <uicontrol>patternProperties</uicontrol>
                keywords (if a property name is not present in the <uicontrol>properties</uicontrol>
                keyword and does not match any regular expression defined by the
                  <uicontrol>patternProperties</uicontrol> keyword, then it is considered
                  <i>unchecked</i>). The value must be a valid JSON schema (object or boolean).</p>
              <p dir="ltr" id="p_swc_sfc_prb">To be more concise, if we have <i>unchecked</i>
                properties:</p>
              <ul id="ul_twc_sfc_prb">
                <li dir="ltr" id="li_uwc_sfc_prb" irina="irina">
                  <p dir="ltr" id="p_vwc_sfc_prb">If the value of this keyword is <i>true</i>, it is
                    always valid.</p>
                </li>
                <li dir="ltr" id="li_wwc_sfc_prb" irina="irina">
                  <p dir="ltr" id="p_xwc_sfc_prb">If the value is <i>false</i>, it is never
                    valid.</p>
                </li>
                <li dir="ltr" id="li_ywc_sfc_prb" irina="irina">
                  <p dir="ltr" id="p_zwc_sfc_prb">If the value contains an object (schema), every
                    property must be valid against that schema.</p>
                </li>
              </ul>
            </entry>
          </row>
          <row>
            <entry morerows="8"/>
            <entry dir="ltr"><uicontrol>unevaluatedProperties</uicontrol></entry>
            <entry dir="ltr">Similar to the <uicontrol>additionalProperties</uicontrol> keyword
              except that this one can recognize properties that declared in subschemas.</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>maxProperties</uicontrol></entry>
            <entry dir="ltr">An object is valid against this keyword if the number of properties it
              contains is lower than or equal to its value. The value must be a non-negative
              integer. Using <i>0</i> as a value means that the object must be empty (no
              properties).</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>minProperties</uicontrol></entry>
            <entry dir="ltr">An object is valid against this keyword if the number of properties it
              contains is greater than or equal to its value. The value of this keyword must be a
              non-negative integer. Using 0 as a value has no effect.</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>patternProperties</uicontrol></entry>
            <entry dir="ltr">An object is valid against this keyword if every property where a
              property name (key) matches a regular expression from its value and is also valid
              against the corresponding schema. The value must be an object where the keys must be
              valid regular expressions and the corresponding values must be valid JSON schemas
              (object or boolean).</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>propertyNames</uicontrol></entry>
            <entry dir="ltr">An object is valid against this keyword if every property name (key) is
              valid against its value. The value must be a valid JSON schema (an object or a
              boolean).</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>required</uicontrol></entry>
            <entry dir="ltr">An object is valid against this keyword if it contains all property
              names (keys) specified by its value. The value must be a non-empty array of strings
              that represent property names.</entry>
          </row>
          <row>
            <entry><uicontrol>dependencies</uicontrol></entry>
            <entry>An object is valid against this keyword if it meets all dependencies specified by
              its value.<note id="note_wf3_nwr_r5b">For <i>2019-09</i> and <i>2020-12</i> schemas, 
                you should use the <uicontrol>dependentRequired</uicontrol>
                and <uicontrol>dependentSchemas</uicontrol> keywords instead.</note></entry>
          </row>
          <row>
            <entry><uicontrol>dependentRequired</uicontrol></entry>
            <entry>An object is valid against this keyword if it meets all dependencies specified by
              its value. The value must be an object where property values must be arrays of strings
              representing property names, and the object must contain all property names.</entry>
          </row>
          <row>
            <entry><uicontrol>dependentSchemas</uicontrol></entry>
            <entry>An object is valid against this keyword if it meets all dependencies specified by
              its value. The value must be an object where property values must be objects
              representing valid JSON schemas, and the whole object must match the entire
              schema.</entry>
          </row>
          <row>
            <entry dir="ltr" rowsep="0">Array Properties</entry>
            <entry dir="ltr"><uicontrol>additionalItems</uicontrol></entry>
            <entry dir="ltr">An array is valid against this keyword if all <i>unchecked</i> items
              are valid against the schema defined by its value.</entry>
          </row>
          <row>
            <entry morerows="8"/>
            <entry dir="ltr"><uicontrol>unevaluatedItems</uicontrol></entry>
            <entry dir="ltr">An array is valid against this keyword if the value is a valid JSON
              schema that will be applied to all array items that were not evaluated by other
              keywords for items (<codeph>prefixItems</codeph>, <codeph>items</codeph>,
                <codeph>contains</codeph>).</entry>
          </row>
          <row>
            <entry><uicontrol>contains</uicontrol></entry>
            <entry>An array is valid against this keyword if at least one item is valid against the
              schema defined by its value. The value must be a valid JSON schema (object or
              boolean).</entry>
          </row>
          <row>
            <entry><uicontrol>maxContains</uicontrol></entry>
            <entry>An array is valid against this keyword if the number of <i>contains</i> is lower
              than or equal to its value. The value must be a non-negative integer.</entry>
          </row>
          <row>
            <entry><uicontrol>minContains</uicontrol></entry>
            <entry>An array is valid against this keyword if the number of <i>contains</i> is
              greater than or equal to its value. The value must be a non-negative integer.</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>items</uicontrol></entry>
            <entry>
              <p dir="ltr" id="p_axc_sfc_prb">An array is valid against this keyword if the items
                are valid against the corresponding schemas provided by its value. The value of this
                keyword can be:</p>
              <ul id="ul_bxc_sfc_prb">
                <li dir="ltr" id="li_cxc_sfc_prb" irina="irina">
                  <p dir="ltr" id="p_dxc_sfc_prb">A valid JSON schema (object or boolean). Every
                    item must be valid against this schema.</p>
                </li>
                <li dir="ltr" id="li_exc_sfc_prb" irina="irina">
                  <p dir="ltr" id="p_fxc_sfc_prb">An array of valid JSON schemas. Each item must be
                    valid against the schema defined at the same position (index). Items that do not
                    have a corresponding position (e.g. an array contains 5 items but this keyword
                    only has 3) will be considered valid unless the
                      <uicontrol>additionalItems</uicontrol> keyword is present, which will decide
                    the validity.</p>
                </li>
              </ul>
            </entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>maxItems</uicontrol></entry>
            <entry dir="ltr">An array is valid against this keyword if the number of items it
              contains is lower than or equal to its value. The value must be a non-negative
              integer.</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>minItems</uicontrol></entry>
            <entry dir="ltr">An array is valid against this keyword if the number of items it
              contains is greater than or equal to its value. The value must be a non-negative
              integer.</entry>
          </row>
          <row>
            <entry><uicontrol>prefixItems</uicontrol></entry>
            <entry>An array is valid against this keyword if each item is a schema that corresponds
              to each index of the document’s array (where the first element validates the first
              element of the input array, the second element validates the second element of the
              input array, and so on).</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>uniqueItems</uicontrol></entry>
            <entry dir="ltr">An array is valid against this keyword if an item cannot be found more
              than once in the array. The value must be boolean. If set to <i>false</i>, the keyword
              validation will be ignored.</entry>
          </row>
          <row>
            <entry dir="ltr" rowsep="0">Number/Integer Properties</entry>
            <entry dir="ltr"><uicontrol>exclusiveMaximum</uicontrol></entry>
            <entry dir="ltr">A number is valid against this keyword if it is strictly lower than its
              value. The value must be a number (integer or float) or boolean.</entry>
          </row>
          <row>
            <entry morerows="3"/>
            <entry dir="ltr"><uicontrol>exclusiveMinimum</uicontrol></entry>
            <entry dir="ltr">A number is valid against this keyword if it is strictly greater than
              its value. The value must be a number (integer or float) or boolean.</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>maximum</uicontrol></entry>
            <entry dir="ltr">A number is valid against this keyword if it is lower than or equal to
              its value. The value must be a number (integer or float).</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>minimum</uicontrol></entry>
            <entry dir="ltr">A number is valid against this keyword if it is greater than or equal
              to its value. The value must be a number (integer or float).</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>multipleOf</uicontrol></entry>
            <entry dir="ltr">A number is valid against this keyword if the division between the
              number and its value results in an integer. The value must be a strictly positive
              number (zero is not allowed).</entry>
          </row>
          <row>
            <entry dir="ltr" rowsep="0">String Properties</entry>
            <entry dir="ltr"><uicontrol>contentEncoding</uicontrol></entry>
            <entry dir="ltr">A string is valid against this keyword if it is encoded using the
              method indicated by its value. The value must be a string.</entry>
          </row>
          <row>
            <entry morerows="4"/>
            <entry dir="ltr"><uicontrol>contentMediaType</uicontrol></entry>
            <entry dir="ltr">A string is valid against this keyword if its content has the media
              type (MIME type) indicated by its value. If the <uicontrol>contentEncoding</uicontrol>
              keyword is also specified, the decoded content must have the indicated media type. The
              value must be a string.</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>format</uicontrol></entry>
            <entry dir="ltr">Performs a semantic validation on data. The value must be a string that
              represents a format. The keyword behavior depends on the data type, meaning that the
              same <uicontrol>format</uicontrol> name for a string behaves differently on a number,
              or is missing, because not all data types must implement a format and usually
              differing data types have different formats.</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>maxLength</uicontrol></entry>
            <entry dir="ltr">A string is valid against this keyword if its length is lower than or
              equal to its value. The value must be a non-negative integer.</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>minLength</uicontrol></entry>
            <entry dir="ltr">A string is valid against this keyword if its length is greater than or
              equal to its value. The value must be a non-negative integer.</entry>
          </row>
          <row>
            <entry dir="ltr"><uicontrol>pattern</uicontrol></entry>
            <entry dir="ltr">A string is valid against this keyword if it matches the regular
              expression specified by its value. The value must be a string that represents a valid
              regular expression.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </body>
  <related-links>
    <link href="json-schema-components.dita"/>
  </related-links>
</topic>
