<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="rendering-elements-cc-author">
  <title>Customizing the Rendering of Elements</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Framework customization<indexterm>Configuring content completion
            proposals</indexterm></indexterm>
        <indexterm>Configuring content completion proposals</indexterm>
        <indexterm>Content completion configuration file (cc_config.xml)</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p id="p_fz1_dgk_54b">In addition to the support for configuring the proposals that appear in the <xref
        keyref="glossentry_content-completion-assistant"><term>Content Completion
        Assistant</term></xref>, <ph keyref="product"/> also includes support for customizing how
      the elements are rendered. You can do this by using the <xref
        href="configuring-xml-node-renderer-customizer.dita#configuring-xml-node-renderer-customizer"
          ><i>XMLNodeRendererCustomizer</i> API extension</xref>, but you can also use the same
      configuration file that is used to configure the content completion proposals.</p>
    <p id="p_gz1_dgk_54b">For an example of a specific use-case, suppose that in DITA you want the names of paragraph
      elements (<xmlelement>p</xmlelement>) to be rendered as <b>"Paragraph"</b> instead of <b>"p"</b> in
      the various components in <uicontrol>Author</uicontrol> mode (such as in the <xref
        href="outliner-view.dita#outliner-view"><uicontrol>Outline</uicontrol>
        view</xref>, <xref href="author-elements-view.dita#author-elements-view"
          ><uicontrol>Elements</uicontrol> view</xref>, <xref
        href="author-attributes-view.dita#author-attributes-view"><uicontrol>Attributes</uicontrol>
        view</xref>, and the breadcrumb navigation bar). To achieve this, you can use the
      <xmlelement>elementRenderings</xmlelement> element in the configuration file.</p>
    <section conkeyref="reusables-editing-documents/how_to_configure_the_proposed_values_in_cc"
      id="d2e47"/>
    <section id="configuration_file">
      <title>Changing the Rendering of Elements (Their Names, Annotations, and Icons) </title>
      <p id="p_hz1_dgk_54b">For the purposes of customizing how the content completion elements are rendered, you can
        use the <xmlelement>render</xmlelement> element inside a <xmlelement>elementRenderings</xmlelement> element
        to specify how element names, their annotations, and their icons are rendered. </p>
      <p id="p_iz1_dgk_54b">The <xmlelement>elementRenderings</xmlelement> element supports the <xmlatt>platform</xmlatt>
        attribute, which can have one of the following values:</p>
      <p id="p_jz1_dgk_54b">
        <dl id="dl_kz1_dgk_54b">
          <dlentry id="dlentry_lz1_dgk_54b">
            <dt>webapp</dt>
            <dd>The element renderings are only applied to <ph keyref="webappProduct"/>.</dd>
          </dlentry>
          <dlentry id="dlentry_mz1_dgk_54b">
            <dt>standalone</dt>
            <dd>The element renderings are only applied to standalone distributions of
              <b>Oxygen</b>.</dd>
          </dlentry>
          <dlentry id="dlentry_nz1_dgk_54b">
            <dt>eclipse</dt>
            <dd>The element renderings are only applied to Eclipse plugin distributions of
                <b>Oxygen</b>.<note id="note_oz1_dgk_54b">If the <xmlatt>platform</xmlatt> attribute is missing, the
                element renderings are applied to all types of distributions.</note></dd>
          </dlentry>
        </dl>
      </p>
      <p id="p_pz1_dgk_54b">You can use the following attributes for the <xmlelement>render</xmlelement> element:</p>
      <p id="p_qz1_dgk_54b">
        <dl id="dl_rz1_dgk_54b">
          <dlentry id="dlentry_sz1_dgk_54b">
            <dt>element</dt>
            <dd>Identifies the element to be customized, in the form of a qualified name. If it does
              not have a prefix, it is considered to be from <i>noNamespace</i>.</dd>
          </dlentry>
          <dlentry id="dlentry_tz1_dgk_54b">
            <dt>as</dt>
            <dd>
              <p id="p_uz1_dgk_54b">Provides the name (label) that will be displayed for the element in various
                components in <uicontrol>Author</uicontrol> mode (the <term>Content Completion
                  Assistant</term>, the breadcrumb navigation bar, the <xref
                  href="author-display-markup.dita#author-display-markup"><uicontrol>Full
                    Tags</uicontrol> display mode</xref>, and the <xref
                  href="outliner-view.dita#outliner-view"><uicontrol>Outline</uicontrol></xref>,
                  <xref href="author-elements-view.dita#author-elements-view"
                    ><uicontrol>Elements</uicontrol></xref>, and <xref
                  href="author-attributes-view.dita#author-attributes-view"
                    ><uicontrol>Attributes</uicontrol></xref> views). This attribute is optional. If
                it is missing, the name of the element is used.</p>
              <p id="p_vz1_dgk_54b">If you want to translate this label into another language, use
                the <xref href="editor-variables.dita#editor-variables/localization"
                    ><codeph>${i18n(key_name)}</codeph> editor variable</xref>. The following code
                snippet shows how the DITA paragraph elements (<xmlelement>p</xmlelement>) can be
                  translated:<codeblock outputclass="language-xml" id="codeblock_wz1_dgk_54b">&lt;elementRenderings>
    &lt;render element="p" as="${i18n(cc_p)}"/>
&lt;/elementRenderings></codeblock><note id="note_xz1_dgk_54b">The
                    <codeph>cc_p</codeph> id is a key that identifies the translations available for
                  the paragraph element.</note></p>
            </dd>
          </dlentry>
          <dlentry id="dlentry_yz1_dgk_54b">
            <dt>iconPath</dt>
            <dd>Optional attribute that specifies the icon for the element. This is shown in the
                <term>Content Completion Assistant</term> and the <xref
                href="outliner-view.dita#outliner-view"><uicontrol>Outline</uicontrol>
                view</xref> in <uicontrol>Author</uicontrol> mode. If it is a relative path, the
              full path of the icon image file will be computed starting from the directory of the
              configuration file (for example, a value of <filepath>"myImg.png"</filepath> will cause
                <ph keyref="product"/> to load <filepath>"frameworks/$
                {framework}/resources/myImg.png"</filepath>). If you want to access a built-in
              resource, the value can begin with a forward slash <codeph>"/"</codeph>, and the image
              file will be searched for in the <ph keyref="product"/> classpath resources (for
                example,<filepath>"/images/OrderedList16.png"</filepath> will load an icon from the
              built-in <ph keyref="product"/>
              <term>JAR</term> file resources.</dd>
          </dlentry>
          <dlentry id="dlentry_zz1_dgk_54b">
            <dt>xml:lang (Deprecated)</dt>
            <dd>
              <p id="p_a1b_dgk_54b">It is recommended to use the <xref
                  href="editor-variables.dita#editor-variables/localization"
                    ><codeph>${i18n(key_name)}</codeph> editor variable</xref> instead. Optional
                attribute that could be used to render the same element differently, depending on
                the language. If there are multiple <xmlelement>render</xmlelement> elements for the
                same <xmlatt>element</xmlatt> attribute (element name) and the
                  <xmlatt>xml:lang</xmlatt> attribute is missing on one of them, that one will be
                considered the default fallback value to be used if none of the others match the
                language specified in the interface.<note id="note_b1b_dgk_54b">The default entry should be listed first,
                  since the application tries to match them in sequence and the last match found is
                  the one that is used.</note></p>
              <p id="p_c1b_dgk_54b">For example, suppose that you want the name of DITA paragraph
                elements (<xmlelement>p</xmlelement>) to be rendered as "Paragraphe" if the language
                is French, "Absatz" if the language is German, and "Paragraph" if the language is
                English (or any other language). Your configuration file should look something like
                this:<codeblock outputclass="language-xml" id="codeblock_d1b_dgk_54b">&lt;elementRenderings>
    &lt;render element="p" as="Paragraph"/>
    &lt;render element="p" as="Paragraphe" xml:lang="fr"/>
    &lt;render element="p" as="Absatz" xml:lang="de"/>
&lt;/elementRenderings></codeblock></p>
            </dd>
          </dlentry>
        </dl>
      </p>
      <p id="p_e1b_dgk_54b">You can also use the configuration file to customize the annotations for elements. For this
        purpose, the <xmlelement>render</xmlelement> element also accepts the following element to change
        the tooltip annotations for an element (in both <uicontrol>Author</uicontrol> mode and
          <uicontrol>Text</uicontrol> mode):</p>
      <p id="p_f1b_dgk_54b">
        <dl id="dl_g1b_dgk_54b">
          <dlentry id="dlentry_h1b_dgk_54b">
            <dt>annotation</dt>
            <dd>This element can be used within the <xmlelement>render</xmlelement> element to customize the
              tooltip annotations that are displayed for the element in various components in
                <uicontrol>Author</uicontrol> mode (such as tooltips shown in the <term>Content
                Completion Assistant</term> documentation window, the breadcrumb navigation bar, the
                <xref href="author-display-markup.dita#author-display-markup"><uicontrol>Full
                  Tags</uicontrol> display mode</xref>, and the <xref
                href="outliner-view.dita#outliner-view"
                ><uicontrol>Outline</uicontrol></xref>, <xref
                href="author-elements-view.dita#author-elements-view"
                  ><uicontrol>Elements</uicontrol></xref>, <xref
                href="author-attributes-view.dita#author-attributes-view"
                  ><uicontrol>Attributes</uicontrol></xref> views), as well as the tooltips that are
              displayed when you hover over elements in <uicontrol>Text</uicontrol> mode. You can
              use HTML content to style the annotations (see the <xref
                href="#rendering-elements-cc-author/example-rendering" format="dita">example
                below</xref>).<note id="note_i1b_dgk_54b">If this element is missing, the <xref
                  href="content-completion-schema-annotations-author.dita#content-completion-schema-annotations-author"
                  >styling for the annotations for that element is collected from the associated
                  schema</xref>.</note><note type="tip" id="note_j1b_dgk_54b">The annotations can also be translated in
                the configuration file. For
                example:<codeblock outputclass="language-xml" id="codeblock_k1b_dgk_54b">&lt;elementRenderings>
    &lt;render element="p" as="${i18n(cc_p)}">
        &lt;annotation>${i18n(cc_p)}&lt;/annotation>
    &lt;/render>
&lt;/elementRenderings></codeblock></note></dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <section id="other_important_notes">
      <title>Other Important Notes About the Configuration File for Rendering Elements</title>
      <note type="important" id="note_l1b_dgk_54b">
        <ul id="ul_m1b_dgk_54b">
          <li id="li_n1b_dgk_54b" irina="irina">This configuration file only affects the content completion assistance, not
            validation.</li>
          <li id="li_o1b_dgk_54b" irina="irina">To test the effects of your changes, you should restart the application, although in
            some cases, you can simply use the <uicontrol><image href="../img/Reload16.png"/>Reload
                (<shortcut>F5</shortcut>)</uicontrol> action to test your customizations.</li>
          <li id="li_p1b_dgk_54b" irina="irina">If the <xref keyref="glossentry_framework"><term>framework</term></xref> has an
            associated <i>style guide</i>, then the annotations defined in the configuration file
            will take precedence over those defined in the <i>style guide</i>. To check to see if
            your <term>framework</term> uses a <i>style guide</i>, look for the following folder:
              <filepath>${oXygenInstallDir}frameworks/${framework}/styleguide/</filepath>. If that
            folder exists, it is recommended that you make your annotation changes directly in the
              <term>style guide</term>, rather than in the configuration file.</li>
          <li id="li_q1b_dgk_54b" irina="irina">If an <xref
              href="configuring-xml-node-renderer-customizer.dita#configuring-xml-node-renderer-customizer"
                ><i>XMLNodeRendererCustomizer</i> API extension</xref> has been implemented for the
              <term>framework</term> and a configuration file is also used, the rendering
            customization for an element will be the result of merging the two. For example, if the
              <i>XMLNodeRendererCustomizer</i> implementation customizes the element name, while the
            configuration file specifies an icon for the element, the properties of both
            customizations will be rendered. However, if both implementations define the same
            property (for example, both specify the rendering of an element name), the
            customizations defined in the configuration file take precedence.</li>
          <li id="li_r1b_dgk_54b" irina="irina">The rendering customizations defined in the configuration file also apply to aspects
            of the <ph keyref="webappProduct"/> interface.</li>
        </ul>
      </note>
    </section>
    <section id="example-rendering">
      <title>Example: Changing the Rendering of an Element</title>
      <p id="p_s1b_dgk_54b">Suppose that you want to render the name of the DITA
          <xmlelement>title</xmlelement> element to begin with a capital letter, use a custom icon
        for it, and provide specific documentation for that element in the various components in
          <uicontrol>Author</uicontrol> mode. The configuration file should look like
        this:<codeblock outputclass="language-xml" id="codeblock_t1b_dgk_54b">&lt;elementRenderings>
   &lt;render element="title"   as="Title"  iconPath="cimg/AcceptAll16.png">
      &lt;annotation>
         &lt;html xmlns="http://www.w3.org/1999/xhtml">
           &lt;head>
             &lt;title>Documentation for the Title Element&lt;/title>
           &lt;/head>
             &lt;body>
           &lt;p>A &lt;i>heading&lt;/i> or &lt;b>label&lt;/b> for the main parts of a topic&lt;/p>
             &lt;/body>
         &lt;/html>
             &lt;/annotation>
   &lt;/render>
&lt;/elementRenderings></codeblock></p>
    </section>
  </body>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link
        href="configuring-content-completion-proposals.dita#configuring-content-completion-proposals"/>
      <link
        href="configure-elements-attr-cc-individually.dita#configure-elements-attr-cc-individually"/>
      <link
        href="configuring-xml-node-renderer-customizer.dita#configuring-xml-node-renderer-customizer"/>
      <link
        href="content-completion-schema-annotations-author.dita#content-completion-schema-annotations-author"/>
      <link href="author-styleguide-annotations.dita#author-styleguide-annotations"/>
    </linklist>
  </related-links>
</topic>
