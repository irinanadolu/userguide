<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="dg-custom-css-pseudo-classes">
  <title>Custom CSS Pseudo-classes</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>CSS extensions<indexterm>Custom CSS pseudo-classes</indexterm>
        </indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p id="p_wzd_dgk_54b">You can set your custom CSS pseudo-classes on the nodes from the <xref
        href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/node/AuthorDocument.html"
        format="html" scope="external"><term>AuthorDocument</term></xref> model. These are similar
      to the normal XML attributes, with the important difference that they are not serialized, and
      by changing them, the document does not create undo and redo edits (the document is considered
      unmodified). You can use custom pseudo-classes for changing the style of an element (and its
      children) without altering the document.</p>
    <p id="p_xzd_dgk_54b">In <ph keyref="product"/> they are used to hide/show the <codeph>colspec</codeph> elements
      from CALS tables. To take a look at the implementation, see:</p>
    <ol id="ol_yzd_dgk_54b">
      <li id="li_zzd_dgk_54b" irina="irina"><filepath><term conkeyref="reusables-user-guide/oxy-install-dir"
          />/frameworks/docbook/css/cals_table.css</filepath> (Search for
          <codeph>-oxy-visible-colspecs</codeph>)</li>
      <li id="li_a12_dgk_54b" irina="irina">The definition of action <codeph>table.toggle.colspec</codeph> from
        the DocBook <xref keyref="glossentry_framework"><term>framework</term></xref> makes use of
        the pre-defined <xref
          href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/commons/operations/TogglePseudoClassOperation.html"
          format="html" scope="external"><term>TogglePseudoClassOperation</term></xref>
        <uicontrol>Author</uicontrol> mode operation.</li>
    </ol>
    <p id="p_b12_dgk_54b">Here are some examples:</p>
    <p id="p_c12_dgk_54b"><b><u>Example: Controlling the visibility of a section using a pseudo-class</u></b></p>
    <p id="p_d12_dgk_54b">You can use a non standard (custom) pseudo-class to impose a style change on a specific
      element. For instance, you can have CSS styles matching the custom pseudo-class
        <codeph>access-control-user</codeph>, like the one below:
      <codeblock outputclass="language-css" id="codeblock_e12_dgk_54b">section {
  display:none;
}

section:access-control-user {
  display:block;
} </codeblock></p>
    <p id="p_f12_dgk_54b">By setting the pseudo-class <codeph>access-control-user</codeph>, the element section will
      become visible by matching the second CSS selector.</p>
    <p id="p_g12_dgk_54b"><b><u>Example: Coloring the elements at the current cursor location</u></b></p>
    <p id="p_h12_dgk_54b">You could create an <xref
        href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorCaretListener.html"
        format="html" scope="external"><term>AuthorCaretListener</term></xref> that sets the
        <codeph>caret-visited</codeph> pseudo-class to the element at the cursor location. The
      effect will be that all the elements traversed by the cursor become
      red.<codeblock outputclass="language-css" id="codeblock_i12_dgk_54b">*:caret-visited {  
  color:red;
} </codeblock></p>
    <p id="p_j12_dgk_54b">The API that you can use from the <term>CaretListener</term>:</p>
    <p id="p_k12_dgk_54b"><xref format="html" scope="external"
        href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorDocumentController.html#setPseudoClass(java.lang.String,%20ro.sync.ecss.extensions.api.node.AuthorElement)"
          ><term>ro.sync.ecss.extensions.api.AuthorDocumentController#setPseudoClass(java.lang.String,
          ro.sync.ecss.extensions.api.node.AuthorElement)</term></xref></p>
    <p id="p_l12_dgk_54b"><xref format="html" scope="external"
        href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorDocumentController.html#removePseudoClass(java.lang.String,%20ro.sync.ecss.extensions.api.node.AuthorElement)"
          ><term>ro.sync.ecss.extensions.api.AuthorDocumentController#removePseudoClass(java.lang.String,
          ro.sync.ecss.extensions.api.node.AuthorElement)</term></xref></p>
    <section id="predefined_author_mode_operations">
      <title>Predefined Pseudo-Class Author Mode Operations</title>
      <p id="p_m12_dgk_54b">Pre-defined <xref
          href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorOperation.html"
          format="html" scope="external"><uicontrol>Author</uicontrol> mode operations</xref> can be
        used directly in your <term>framework</term> to work with custom pseudo-classes:<ol id="ol_n12_dgk_54b">
          <li id="li_o12_dgk_54b" irina="irina"><xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/commons/operations/TogglePseudoClassOperation.html"
              format="html" scope="external"><term>TogglePseudoClassOperation</term></xref></li>
          <li id="li_p12_dgk_54b" irina="irina"><xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/commons/operations/SetPseudoClassOperation.html"
              format="html" scope="external"><term>SetPseudoClassOperation</term></xref></li>
          <li id="li_q12_dgk_54b" irina="irina"><xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/commons/operations/RemovePseudoClassOperation.html"
              format="html" scope="external"><term>RemovePseudoClassOperation</term></xref></li>
        </ol></p>
    </section>
  </body>
</topic>
