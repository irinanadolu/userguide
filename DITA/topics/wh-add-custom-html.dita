<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="wh-add-custom-html">
  <title>How to Insert Custom HTML Content</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm product="author developer editor authorEclipse developerEclipse editorEclipse"
          >WebHelp Responsive <indexterm>Inserting HTML</indexterm></indexterm>
        <indexterm product="author developer editor authorEclipse developerEclipse editorEclipse"
          >WebHelp Responsive <indexterm>Customizing output with HTML
          content</indexterm></indexterm>
        <indexterm product="webhelp-responsive ope">Inserting HTML</indexterm>
        <indexterm product="webhelp-responsive ope">Customizing output with HTML content</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p id="p_psn_cgk_54b">You can add custom HTML content in the WebHelp Responsive output by
      inserting it in a well-formed XML file (or specifying it in a <b>well-formed</b> XHTML
      fragment) that will be referenced in the transformation (either from an <xref
        keyref="glossentry-wh-publishing-template"><term>Oxygen Publishing Template</term></xref> or
      using one of the <xref
        href="webhelp-responsive-plugin-additional-parameters.dita#webhelp-responsive-plugin-additional-parameters/html_fragment_extension_parameters"
        >HTML fragment placeholder parameters</xref>). This content may include references to
      additional JavaScript, CSS, and other types of resources, or such resources can be inserted
      inline within the HTML content that is inserted in the XML file.</p>
    <section id="the_xml_file">
      <title>The XML File</title>
      <p id="p-comments">There are several things to consider regarding this XML file:<ul id="ul_qsn_cgk_54b">
          <li id="li_v3w_qqt_s4b" irina="irina">
            <p id="p_w3w_qqt_s4b"><b>Well-Formedness</b> - If the content of the file is not <xref
                href="checking-xml-well-formedness.dita#checking-xml-well-formedness"
                product="author developer editor authorEclipse developerEclipse editorEclipse"
                  ><i>XML Well-formed</i></xref><ph product="webhelp webhelp-responsive ope"><i>XML
                  Well-formed</i></ph>, the transformation will automatically convert
              non-well-formed HTML content to a well-formed XML equivalent (assuming the
                <codeph>webhelp.enable.html.fragments.cleanup</codeph> transformation parameter is
              set to <b>true</b>).</p>
            <p id="p_x3w_qqt_s4b">For example, if the HTML content includes several
                <xmlelement>script</xmlelement> or <xmlelement>link</xmlelement> elements, the XML
              fragment would have multiple root elements and to make it well-formed, it would be
              wrapped it in an <xmlelement>html</xmlelement> element. This element tag will be
              filtered out and only its children will be copied to the output documents. Similarly,
              you can wrap your content in <xmlelement>head</xmlelement>,
                <xmlelement>body</xmlelement>, <xmlelement>html/head</xmlelement>, or
                <xmlelement>html/body</xmlelement> elements.</p>
            <note id="note_hvz_2yb_t4b">The converted fragments are stored in a file located in the
                <filepath>whr-html-fragments</filepath> subfolder of the  transformation's temporary
              directory.</note>
            <p id="p_k4m_kjt_s4b">
              <note id="note_tkt_ljt_s4b" type="tip">If you do not want the transformation to
                automatically convert non-well-formed content into well-formed XML content, you can
                set the <codeph>webhelp.enable.html.fragments.cleanup</codeph> transformation
                parameter to <b>false</b>. This will instead cause the transformation to fail if at
                least one HTML fragment is not well-formed.</note>
            </p>
          </li>
          <li conkeyref="reusables-transforming-documents/li-2b" id="li_rsn_cgk_54b" irina="irina"/>
          <li id="inline-js" irina="irina">
            <p id="p_rqm_rqt_s4b"><b>Inline JavaScript or CSS Content</b>:</p>
            <p id="p_sqm_rqt_s4b"
              >JavaScript:<codeblock outputclass="language-xml" id="codeblock_ssn_cgk_54b">&lt;script type="text/javascript">
    /* Include JavaScript code here. */
 
    function myFunction() {
      return true;
    }
&lt;/script> </codeblock></p>
            <p id="p_tqm_rqt_s4b">CSS:<codeblock outputclass="language-xml" id="codeblock_tsn_cgk_54b">&lt;style>
    /* Include CSS style rules here. */

    *{
      color:red
    } 
&lt;/style></codeblock><note id="note_uqm_rqt_s4b">
                <p id="p_cs3_b4s_t4b">If you have special characters (e.g. <codeph>&amp;</codeph>,
                    <codeph>&lt;</codeph>) that break the well-formedness of the XML fragment, it is
                  important to place the content inside an XML comment.</p>
                <p id="p_vqm_rqt_s4b">Otherwise, the WebHelp transformation automatically wraps
                  inline JavaScript or CSS content in an XML comment. Also, if the commented content
                  contains constructs that are not allowed in an XML comment, those constructs are
                  escaped.</p>
                <p id="p_wqm_rqt_s4b"><b>[Important]</b> XML comment tags (both the start and end
                  tags) must be on lines by themselves. If they are on the same line as any of the
                  script's content, it will likely result in a JavaScript error.</p>
                <codeblock outputclass="language-xml" id="codeblock_usn_cgk_54b">&lt;script type="text/javascript">
  &lt;!--
    /* Include JavaScript code here. */
 
    function myFunction() {
      return true;
    }
  --/>
&lt;/script> </codeblock>
              </note></p>
          </li>
        </ul></p>
    </section>
    <section id="using_webhelp_macros_inside_a_html_fragment_file">
      <title>Using WebHelp Macros</title>
      <p id="p_vsn_cgk_54b">The XML file can use WebHelp macros, which are variables that will be expanded when the
        content of the HTML fragment file will be copied in the final output.</p>
      <p id="p_wsn_cgk_54b">There are two possibilities for using macros:<ul id="ul_xsn_cgk_54b">
          <li id="li_ysn_cgk_54b" irina="irina"><b>Directly in attribute values</b> - For example, if you want to reference a
            JavaScript file from the Publishing Template directory, you can use the following
            construct:<codeblock outputclass="language-xml" id="codeblock_zsn_cgk_54b">&lt;script type="text/javascript" src="${path(oxygen-webhelp-template-dir)}/">&lt;/script></codeblock></li>
          <li id="li_atn_cgk_54b" irina="irina"><b>In text content</b> - Using the <xmlelement>whc:macro</xmlelement> template
              component:<codeblock outputclass="language-xml" id="codeblock_btn_cgk_54b">&lt;script type="text/javascript"> 
    var outDirPath = '&lt;whc:macro value="${path(oxygen-webhelp-output-dir)}" 
    xmlns:whc="http://www.oxygenxml.com/webhelp/components"/>';
    console.log("The output directory path is:", outDirPath);
&lt;/script></codeblock><note id="note_ctn_cgk_54b">When using the <codeph>&lt;whc:macro></codeph> element,
              you should also include the
                <codeph>xmlns:whc="http://www.oxygenxml.com/webhelp/components"</codeph> namespace
              declaration for the <codeph>whc</codeph> prefix. This is necessary for the XML
              fragment to be well-formed. </note></li>
        </ul></p>
      <p conkeyref="reusable-webhelp-responsive-macros/list_macro_implementations"
        id="p_dtn_cgk_54b"/>
    </section>
    <section id="referencing_the_html_fragment_using_a_publishing_">
      <title>Referencing the HTML fragment using a Publishing Template</title>
      <p id="p_etn_cgk_54b">
        <ol id="ol_ftn_cgk_54b">
          <li id="li_gtn_cgk_54b" irina="irina">If you have not already created a Publishing Template, see <xref
              href="whr_publishing_templates.dita"/>.</li>
          <li id="li_htn_cgk_54b" irina="irina">Insert the HTML content in a file that is XML well-formed (for example,
              <filepath>custom-html.xml</filepath>).</li>
          <li id="li_itn_cgk_54b" irina="irina">Using the <uicontrol product="author developer editor webhelp-responsive ope"
              >Project</uicontrol><uicontrol product="authorEclipse developerEclipse editorEclipse"
              >Project Explorer</uicontrol> view, copy your custom XML file in a folder inside publishing
            the template root folder (for example, in the
              <filepath>custom_footer_template/html-fragments</filepath> folder).</li>
          <li id="li_jtn_cgk_54b" irina="irina">Open the <xref href="whr_publishing_template_contents.dita#template_descritpor_file"
              >template descriptor file</xref> associated with your publishing template and add a
            reference to the custom HTML fragment in the <term>html-fragments</term>
              section.<codeblock outputclass="language-xml" id="codeblock_ktn_cgk_54b">&lt;publishing-template>
    ...    
    &lt;webhelp>
      ...
      &lt;html-fragments>
        &lt;fragment 
          file="html-fragments/custom-html.xml" 
          placeholder="webhelp.fragment.head"/></codeblock><note id="note_ltn_cgk_54b">If
              you want to insert the content in another location within the output document, you can
              reference the XML file from any other <xref
                href="whr_publishing_template_contents.dita#html_fragment_extension_points">HTML
                Fragment extension points</xref>.</note></li>
          <li id="li_mtn_cgk_54b" irina="irina">Open the <term>DITA Map WebHelp Responsive</term> transformation scenario.</li>
          <li id="li_ntn_cgk_54b" irina="irina">Click the <uicontrol>Choose Custom Publishing Template</uicontrol> link and select
            your template.</li>
          <li id="li_otn_cgk_54b" irina="irina">Click <uicontrol>OK</uicontrol> to save the changes to the transformation
            scenario.</li>
          <li id="li_ptn_cgk_54b" irina="irina">Run the transformation scenario.</li>
        </ol>
      </p>
      <p id="p_qtn_cgk_54b"><b>Results:</b> Your additional content will be included at the end of the
          <xmlelement>head</xmlelement> element of your output document.</p>
    </section>
    <section id="referencing_the_html_fragment_using_a_transformat">
      <title>Referencing the HTML Fragment using a Transformation Parameter</title>
      <p id="p_rtn_cgk_54b">
        <ol id="ol_stn_cgk_54b">
          <li id="li_ttn_cgk_54b" irina="irina">Insert the HTML content in a well-formed XML file.</li>
          <li id="li_utn_cgk_54b" irina="irina">Edit the <term>DITA Map WebHelp Responsive</term> transformation scenario and open the
              <uicontrol>Parameters</uicontrol> tab.</li>
          <li id="li_vtn_cgk_54b" irina="irina">Edit the value of the <codeph>webhelp.fragment.head</codeph> parameter and set it to
            the absolute path of your XML file.<note id="note_wtn_cgk_54b">If you want to insert the content in another
              location within the output document, you can reference the XML file from any other
                <xref href="whr_publishing_template_contents.dita#html_fragment_extension_points"
                >HTML Fragment extension points</xref>.</note></li>
          <li id="li_xtn_cgk_54b" irina="irina">Click <uicontrol>OK</uicontrol> to save the changes to the transformation
            scenario.</li>
          <li id="li_ytn_cgk_54b" irina="irina">Run the transformation scenario.</li>
        </ol>
      </p>
      <p id="p_ztn_cgk_54b"><b>Results:</b> Your additional content will be included at the end of the
          <xmlelement>head</xmlelement> element of your output document.</p>
    </section>
  </body>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link href="whr_publishing_template_contents.dita#html_fragment_extension_points"/>
      <link href="whr_publishing_template_contents.dita"/>
    </linklist>
  </related-links>
</topic>
