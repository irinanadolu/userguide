<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="author-action-event-handler">
  <title>Handling Author Mode Action Events</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Framework customization<indexterm>Extensions<indexterm>Author Action Event
              Handler</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p id="p_brb_dgk_54b">The <i>AuthorActionEventHandler</i> extension point allows you to handle certain
        <uicontrol>Author</uicontrol> mode actions in a special way. For example, a specific
      use-case would be if you want to insert new lines when you press
          <uicontrol><shortcut>Enter</shortcut></uicontrol> instead of it opening the <xref
        keyref="glossentry_content-completion-assistant"><term>Content Completion
        Assistant</term></xref>.</p>
    <section id="implement_an_authoractioneventhandler">
      <title>How to Implement an <i>AuthorActionEventHandler</i></title>
      <p id="p_crb_dgk_54b">To implement your own <i>AuthorActionEventHandler</i>, follow this procedure:<ol id="ol_drb_dgk_54b">
          <li id="li_erb_dgk_54b" irina="irina">Implement the <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorActionEventHandler.html"
              format="html" scope="external"
                ><i>ro.sync.ecss.extensions.api.AuthorActionEventHandler</i></xref> interface.</li>
          <li id="li_frb_dgk_54b" irina="irina">To instruct <ph keyref="product"/> to use this newly created implementation, use
            either of the following methods:<ol id="ol_grb_dgk_54b">
              <li id="li_hrb_dgk_54b" irina="irina">If you have <xref href="dg-extensions-bundle.dita#dg-extensions-bundle">configured
                  an extensions bundle</xref>, you can return the <i>AuthorActionEventHandler</i>
                implementation using the
                  <i>ro.sync.ecss.extensions.api.ExtensionsBundle.getAuthorActionEventHandler()</i>
                method.</li>
              <li id="li_irb_dgk_54b" irina="irina">Specify the <i>AuthorActionEventHandler</i> in the <uicontrol>Author action event
                  handler</uicontrol> individual extension in the <xref
                  href="document-type-extensions-tab.dita#document-type-extensions-tab"
                    ><uicontrol>Extensions</uicontrol> tab</xref> of the <xref
                  href="the-document-type-dialog.dita#the-document-type-dialog"><uicontrol>Document
                    Type</uicontrol> configuration dialog box</xref> for your particular document
                type.</li>
            </ol></li>
        </ol></p>
    </section>
    <section id="example">
      <title>Example</title>
      <p id="p_jrb_dgk_54b">The following example illustrates the use-case mentioned in the introduction, that is an
        implementation for inserting a new line when the user presses
            <uicontrol><shortcut>Enter</shortcut></uicontrol> in <uicontrol>Author</uicontrol> mode.
        It uses the <i>canHandleEvent</i> method to make sure the insertion will be performed in an
        element that will preserve the <codeph>new-line</codeph> character. Then the
          <i>handleEvent</i> method inserts the new line at the current cursor position.</p>
      <codeblock outputclass="language-java" id="codeblock_krb_dgk_54b">public class CustomAuthorActionEventHandler implements AuthorActionEventHandler
{

 /**
  * @see ro.sync.ecss.extensions.api.AuthorActionEventHandler#canHandleEvent
(AuthorAccess, AuthorActionEventType)
  */
  @Override
  public boolean canHandleEvent(AuthorAccess authorAccess,
AuthorActionEventType type) {
    boolean canHandle = false;

    if (type == AuthorActionEventType.ENTER) {
      AuthorDocumentController documentController = 
authorAccess.getDocumentController();
    int caretOffset = authorAccess.getEditorAccess().getCaretOffset();
    try {
      AuthorNode nodeAtOffset = documentController.getNodeAtOffset(caretOffset);
      if (nodeAtOffset instanceof AuthorElement) {
        AuthorElement elementAtOffset = (AuthorElement) nodeAtOffset;
        AttrValue xmlSpace = elementAtOffset.getAttribute("xml:space");
        if (xmlSpace != null &amp;&amp; xmlSpace.getValue().equals("preserve")) {
          canHandle = true;
        }
      }
    } catch (BadLocationException ex) {
        if (logger.isDebugEnabled()) {
          logger.error(ex.getMessage(), ex);
        }
      }
    }

    return canHandle;
  }

 /**
  * @see ro.sync.ecss.extensions.api.AuthorActionEventHandler#handleEvent
(ro.sync.ecss.extensions.api.AuthorAccess, 
ro.sync.ecss.extensions.api.AuthorActionEventHandler.AuthorActionEventType)
  */
  @Override
  public boolean handleEvent(AuthorAccess authorAccess,
 AuthorActionEventType eventType) {
    int caretOffset = authorAccess.getEditorAccess().getCaretOffset();
    // Insert a new line
    authorAccess.getDocumentController().insertText(caretOffset, "\n");
    return true;
  }

  /**
   * @see ro.sync.ecss.extensions.api.Extension#getDescription()
   */
  @Override
  public String getDescription() {
    return "Insert a new line";
  }
}</codeblock>
    </section>
  </body>
</topic>
