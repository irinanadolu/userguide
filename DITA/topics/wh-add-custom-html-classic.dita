<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="wh-add-custom-html-classic">
  <title>How to Add Custom HTML Content in WebHelp Classic Output</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm product="author developer editor authorEclipse developerEclipse editorEclipse"
          >WebHelp Classic<indexterm>Add custom HTML content</indexterm></indexterm>
        <indexterm product="webhelp">Adding custom HTML content</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p id="p_o2p_cgk_54b">You can add custom HTML content in the WebHelp Classic output by inserting it in a
      well-formed XML file that will be referenced in the transformation. This content may include
      references to additional JavaScript, CSS, and other types of resources, or such resources can
      be inserted inline within the HTML content that is inserted in the XML file.</p>
    <section id="using_oxygen_xml_editorauthor">
      <title>Using Oxygen XML Editor/Author</title>
      <p id="p_p2p_cgk_54b">To include custom HTML content in the WebHelp Classic output using a transformation
        scenario from within <b>Oxygen XML Editor/Author</b>, follow this procedure:<ol id="ol_q2p_cgk_54b">
          <li id="li_r2p_cgk_54b" irina="irina">Insert the HTML content in a well-formed XML file considering the following notes:<ul id="ul_s2p_cgk_54b">
              <li id="li_ptj_spt_s4b" irina="irina">
                <p id="p_qtj_spt_s4b"><b>Well-Formedness</b> - If the content of the file is not
                    <xref href="checking-xml-well-formedness.dita#checking-xml-well-formedness"
                    product="author developer editor authorEclipse developerEclipse editorEclipse"
                      ><i>XML Well-formed</i></xref><ph product="webhelp webhelp-responsive ope"
                      ><i>XML Well-formed</i></ph>, (or fragments are not well-formed), the
                  transformation will fail.</p>
                <p id="p_rtj_spt_s4b">A common use case is if you want to include several
                    <xmlelement>script</xmlelement> or <xmlelement>link</xmlelement> elements. In
                  this case, the XML fragment has multiple root elements and to make it well-formed,
                  you can wrap it in an <xmlelement>html</xmlelement> element. This element tag will
                  be filtered out and only its children will be copied to the output documents.
                  Similarly, you can wrap your content in <xmlelement>head</xmlelement>,
                    <xmlelement>body</xmlelement>, <xmlelement>html/head</xmlelement>, or
                    <xmlelement>html/body</xmlelement> elements.</p>
              </li>
              <li conkeyref="reusables-transforming-documents/li-2" id="li_t2p_cgk_54b" irina="irina"/>
              <li id="li_j2m_5pt_s4b" irina="irina">
                <p id="p_k2m_5pt_s4b"><b>Inline JavaScript or CSS Content</b>:</p>
                <p id="p_l2m_5pt_s4b"
                  >JavaScript:<codeblock outputclass="language-xml" id="codeblock_u2p_cgk_54b">&lt;script type="text/javascript">
    /* Include JavaScript code here. */
 
    function myFunction() {
      return true;
    }
&lt;/script> </codeblock></p>
                <p id="p_m2m_5pt_s4b">CSS:<codeblock outputclass="language-xml" id="codeblock_v2p_cgk_54b">&lt;style>
    /* Include CSS style rules here. */

    *{
      color:red
    } 
&lt;/style></codeblock><note id="note_n2m_5pt_s4b">
                    <p id="p_o2m_5pt_s4b">If you have special characters (for example,
                        <codeph>&amp;</codeph>, <codeph>&lt;</codeph>) that break the
                      well-formedness of the XML fragment, it is important to place the content
                      inside an XML comment.</p>
                    <p id="p_p2m_5pt_s4b"><b>[Important]</b> XML comment tags (both the start and
                      end tags) must be on lines by themselves. If they are on the same line as any
                      of the script's content, it will likely result in a JavaScript error.</p>
                    <codeblock outputclass="language-xml" id="codeblock_w2p_cgk_54b">&lt;script type="text/javascript">
  &lt;!--
    /* Include JavaScript code here. */
 
    function myFunction() {
      return true;
    }
  --/>
&lt;/script> </codeblock>
                  </note></p>
              </li>
            </ul></li>
          <li id="li_x2p_cgk_54b" irina="irina">Edit the WebHelp Classic transformation scenario.</li>
          <li id="li_y2p_cgk_54b" irina="irina">Go to the <uicontrol>Parameters</uicontrol> tab.</li>
          <li id="li_z2p_cgk_54b" irina="irina">Edit the value of the <codeph>webhelp.head.script</codeph> parameter and set it to
            reference the URL of the XML file created in step 1. Your additional content will be
            included at the end of the <codeph>head</codeph> element of your output
              document.<note id="note_afp_cgk_54b">If you want to include the content in the <codeph>body</codeph>
              element, use the <codeph>webhelp.body.script</codeph> parameter instead.</note></li>
          <li id="li_bfp_cgk_54b" irina="irina">Click <uicontrol>OK</uicontrol> to save the changes and run the transformation
            scenario.</li>
        </ol></p>
    </section>
    <section id="using_a_script_outside_of_oxygen_xml_editorauthor">
      <title>Using a Script Outside of Oxygen XML Editor/Author</title>
      <note conkeyref="reusables-transforming-documents/note-command-line"
        product="author developer editor authorEclipse developerEclipse editorEclipse" id="note_cfp_cgk_54b"/>
      <p id="p_dfp_cgk_54b">To include custom HTML content in the WebHelp Classic output using a <xref
          href="using-the-webhelp-plugin-docbook.dita">script outside of <b>Oxygen XML
            Editor/Author</b></xref>, follow this procedure:<ol id="ol_efp_cgk_54b">
          <li id="li_ffp_cgk_54b" irina="irina">Insert the HTML content in a well-formed XML file considering the following notes:<ul id="ul_gfp_cgk_54b">
              <li id="li_njs_nqt_s4b" irina="irina">
                <p id="p_ojs_nqt_s4b"><b>Well-Formedness</b> - If the content of the file is not
                    <xref href="checking-xml-well-formedness.dita#checking-xml-well-formedness"
                    product="author developer editor authorEclipse developerEclipse editorEclipse"
                      ><i>XML Well-formed</i></xref><ph product="webhelp webhelp-responsive ope"
                      ><i>XML Well-formed</i></ph>, (or fragments are not well-formed), the
                  transformation will fail.</p>
                <p id="p_pjs_nqt_s4b">A common use case is if you want to include several
                    <xmlelement>script</xmlelement> or <xmlelement>link</xmlelement> elements. In
                  this case, the XML fragment has multiple root elements and to make it well-formed,
                  you can wrap it in an <xmlelement>html</xmlelement> element. This element tag will
                  be filtered out and only its children will be copied to the output documents.
                  Similarly, you can wrap your content in <xmlelement>head</xmlelement>,
                    <xmlelement>body</xmlelement>, <xmlelement>html/head</xmlelement>, or
                    <xmlelement>html/body</xmlelement> elements.</p>
              </li>
              <li conkeyref="reusables-transforming-documents/li-2" id="li_hfp_cgk_54b" irina="irina"/>
              <li id="li_jkh_mqt_s4b" irina="irina">
                <p id="p_kkh_mqt_s4b"><b>Inline JavaScript or CSS Content</b>:</p>
                <p id="p_lkh_mqt_s4b"
                  >JavaScript:<codeblock outputclass="language-xml" id="codeblock_ifp_cgk_54b">&lt;script type="text/javascript">
    /* Include JavaScript code here. */
 
    function myFunction() {
      return true;
    }
&lt;/script> </codeblock></p>
                <p id="p_mkh_mqt_s4b">CSS:<codeblock outputclass="language-xml" id="codeblock_jfp_cgk_54b">&lt;style>
    /* Include CSS style rules here. */

    *{
      color:red
    } 
&lt;/style></codeblock><note id="note_nkh_mqt_s4b">
                    <p id="p_okh_mqt_s4b">If you have special characters (for example,
                        <codeph>&amp;</codeph>, <codeph>&lt;</codeph>) that break the
                      well-formedness of the XML fragment, it is important to place the content
                      inside an XML comment.</p>
                    <p id="p_pkh_mqt_s4b"><b>[Important]</b> XML comment tags (both the start and
                      end tags) must be on lines by themselves. If they are on the same line as any
                      of the script's content, it will likely result in a JavaScript error.</p>
                    <codeblock outputclass="language-xml" id="codeblock_kfp_cgk_54b">&lt;script type="text/javascript">
  &lt;!--
    /* Include JavaScript code here. */
 
    function myFunction() {
      return true;
    }
  --/>
&lt;/script> </codeblock>
                  </note></p>
              </li>
            </ul></li>
          <li id="li_lfp_cgk_54b" irina="irina">Use the <codeph>webhelp.head.script</codeph> parameter in your transformation script
            and set its value to reference the URL of the XML file created in step 1. Your
            additional content will be included at the end of the <codeph>head</codeph> element of
            your output document.<note id="note_mfp_cgk_54b">If you want to include the content in the
                <codeph>body</codeph> element, use the <codeph>webhelp.body.script</codeph>
              parameter instead.</note></li>
          <li id="li_nfp_cgk_54b" irina="irina">
            <p id="p_ofp_cgk_54b">Execute the transformation script.</p>
          </li>
        </ol></p>
    </section>
  </body>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link href="copy_resources.dita"/>
    </linklist>
  </related-links>
</topic>
