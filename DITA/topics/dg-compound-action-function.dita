<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="dg-compound-action-function">
  <title>Compound Actions: oxy_compound_action() Function</title>
  <shortdesc>This function allows you to define multiple actions that will be executed
    sequentially.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>CSS extensions<indexterm>Custom
              functions<indexterm>oxy_compound_action</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <p id="p_kwc_dgk_54b">The <codeph>oxy_compound_action()</codeph> function is used from the <xref
        href="button-editor.dita"><term>oxy_button()</term> form control function</xref> or the
        <xref href="button-group-editor.dita"><term>oxy_buttonGroup()</term> form control
        function</xref>.</p>
    <p id="p_lwc_dgk_54b">The arguments received by the <codeph>oxy_compound_action()</codeph>
      function are a list of actions (executed sequentially) that are defined with the <xref
        href="dg-action-function.dita"><term>oxy_action()</term> function</xref>.</p>
    <p id="p_mwc_dgk_54b">You can use three optional properties (<codeph>name</codeph>,
        <codeph>description</codeph>, <codeph>icon</codeph>) in the
        <codeph>oxy_compound_action()</codeph> function to provide labels for the compound action.
      If you do not specify these three properties, those same properties defined in the first
        <term>oxy_action</term> function will be used for the labels.</p>
    <p id="oxy-action-properties1"><ul id="ul_nwc_dgk_54b">
        <li id="li_owc_dgk_54b" irina="irina"><uicontrol>name</uicontrol> - The name of the action. It will be
          displayed as the label for the action. If you want to reuse the name of an action already
          defined in your framework, you can use the <term>oxy_getActionName</term> function.</li>
        <li id="li_pwc_dgk_54b" irina="irina"><uicontrol>description</uicontrol> - A short description with
          details about the result of the action. It will be displayed in a tooltip when hovering
          over the button linked to this action. If you want to reuse the description of an action
          already defined in your framework, you can use the <term>oxy_getActionDescription</term>
          function.</li>
        <li id="icon-li" irina="irina"><uicontrol>icon</uicontrol> - A path relative to the CSS pointing to an
          image (the icon for the action). The path can point to resources that are packed in <ph
            keyref="product"/> (<filepath>oxygen.jar</filepath>) by starting its value with
            <codeph>/</codeph> (for example, <filepath>/images/Remove16.png</filepath>). It can also
          be expressed as an <xref href="../topics/editor-variables.dita"><term>editor
              variable</term></xref>. If you want to reuse the icon of an action already defined in
          your framework, you can use the <term>oxy_getActionIcon</term> function.</li>
      </ul>The <term>oxy_getActionName</term>, <term>oxy_getActionDescription</term>, and
        <term>oxy_getActionIcon</term> functions accept the following 2 parameters:<ul
        id="ul_qwc_dgk_54b">
        <li id="li_rwc_dgk_54b" irina="irina"><uicontrol>framework.defined.action.id</uicontrol> (required) - The
          ID of an action defined in the current framework that gets the name, description, or icon
          for that action.</li>
        <li id="li_swc_dgk_54b" irina="irina"><uicontrol>fallback</uicontrol> (optional) - A fallback value in
          case the ID value provided in the <codeph>framework.defined.action.id</codeph> parameter
          is not found.</li>
      </ul></p>
    <p id="p_twc_dgk_54b"><u><uicontrol>Example: <term>oxy_compound_action</term>
          Function</uicontrol></u><codeblock outputclass="language-css" id="codeblock_uwc_dgk_54b">oxy_button(
    action, 
        oxy_compound_action(
        name, oxy_getActionName('framework.id', 'Fallback'), 
        description, 'Inserts a paragraph and uses form controls to edit its @audience attribute', 
        icon, url('http://www.oxygenxml.com/img/icn_oxy20.png'), 
        oxy_action(
            name, 'Insert', 
            description, 'Insert an element after the current one', 
            operation, 'ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation', 
            icon, url('insert.png'), 
            arg-fragment, "&lt;p audience=''>&lt;/p>", 
            arg-insertLocation, '.', 
            arg-insertPosition, 'After'
        ), 
        oxy_action(
            name, 'Activate edit mode', 
            description, 'Sets a pseudo class that will activate a CSS rule that will present a text field form control for the @audience attribute', 
            operation, 'SetPseudoClassOperation', 
            arg-name, 'edit-mode-on', 
            arg-elementLocation, '.'
        )
        )
, showIcon, true)</codeblock></p>
    <note type="tip" id="note_vwc_dgk_54b">A code template is available to make it easy to add the
        <codeph>oxy_compound_action</codeph> function with the <xref
        keyref="glossentry_content-completion-assistant"><term>Content Completion
        Assistant</term></xref> by pressing <uicontrol
        conkeyref="reusable-oxygen-shortcuts-list/ctrl_space"/> and select the <image
        href="../img/CodeTemplates12.gif" id="image_x12_g2h_5r"/>
      <codeph>oxy_action_list</codeph> code template.</note>
  </conbody>
  <related-links>
      <link href="dg-action-function.dita#dg-action-function"/>
      <link href="button-editor.dita#button-editor"/>
  </related-links>
</concept>
