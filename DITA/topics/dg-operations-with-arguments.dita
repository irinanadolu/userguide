<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task
  PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="dg-operations-with-arguments">
  <title>Example 2 - Operations with Arguments - Report from Database Operation</title>
  <taskbody>
    <context>
      <p id="p_ypb_dgk_54b">In this example, an operation is created that connects to a relational database and
        executes an SQL statement. The result should be inserted in the edited XML document as a
        table. To make the operation fully configurable, it will have arguments for the <i>database
          connection string</i>, the <i>user name</i>, the <i>password</i> and the <i>SQL
          expression</i>.</p>
    </context>
    <steps id="procedure-dg-operations-with-arguments">
      <step>
        <cmd>Set up a sample project following <xref
            href="https://www.oxygenxml.com/oxygen_sdk.html" format="html" scope="external">this set
            of instructions</xref>. The <term>framework</term> project is
            <b>oxygen-sample-framework</b>.</cmd>
      </step>
      <step>
        <cmd>Create the class
          <codeph>simple.documentation.framework.QueryDatabaseOperation</codeph>. This class must
          implement the <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorOperation.html"
            format="html" scope="external"><i>ro.sync.ecss.extensions.api.AuthorOperation</i></xref>
          interface.</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_zpb_dgk_54b">
import ro.sync.ecss.extensions.api.ArgumentDescriptor;
import ro.sync.ecss.extensions.api.ArgumentsMap;
import ro.sync.ecss.extensions.api.AuthorAccess;
import ro.sync.ecss.extensions.api.AuthorOperation;
import ro.sync.ecss.extensions.api.AuthorOperationException;

public class QueryDatabaseOperation implements AuthorOperation{</codeblock>
        </info>
      </step>
      <step>
        <cmd>Now define the operation's arguments. For each of them, you will use a
            <codeph>String</codeph> constant representing the argument name:</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_aqb_dgk_54b">private static final String ARG_JDBC_DRIVER ="jdbc_driver";
private static final String ARG_USER ="user";
private static final String ARG_PASSWORD ="password";
private static final String ARG_SQL ="sql";
private static final String ARG_CONNECTION ="connection";</codeblock>
        </info>
      </step>
      <step>
        <cmd>You must describe the argument name and type. To do this, implement the
            <codeph>getArguments</codeph> method that will return an array of argument
          descriptors:</cmd>
        <info>
          <p id="p_bqb_dgk_54b">
            <codeblock outputclass="language-java" id="codeblock_cqb_dgk_54b">public ArgumentDescriptor[] getArguments() {
  ArgumentDescriptor args[] = new ArgumentDescriptor[] {
    new ArgumentDescriptor(
      ARG_JDBC_DRIVER,
      ArgumentDescriptor.TYPE_STRING,
      "The name of the Java class that is the JDBC driver."),
    new ArgumentDescriptor(
      ARG_CONNECTION,
      ArgumentDescriptor.TYPE_STRING,
      "The database URL connection string."),
    new ArgumentDescriptor(
      ARG_USER,
      ArgumentDescriptor.TYPE_STRING,
      "The name of the database user."),
    new ArgumentDescriptor(
      ARG_PASSWORD,
      ArgumentDescriptor.TYPE_STRING,
      "The database password."),
   new ArgumentDescriptor(
     ARG_SQL,
     ArgumentDescriptor.TYPE_STRING,
     "The SQL statement to be executed.")
  };
  return args;
}</codeblock>
          </p>
          <p id="p_dqb_dgk_54b">These names, types and descriptions will be listed in the
              <uicontrol>Arguments</uicontrol> table when the operation is configured.</p>
        </info>
      </step>
      <step>
        <cmd>When the operation is invoked, the implementation of the <codeph>doOperation</codeph>
          method extracts the arguments, forwards them to the method that connects to the database
          and generates the XML fragment. The XML fragment is then inserted at the cursor
          position.</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_eqb_dgk_54b">public void doOperation(AuthorAccess authorAccess, ArgumentsMap map)
  throws IllegalArgumentException, AuthorOperationException {

  // Collects the arguments.
  String jdbcDriver = (String)map.getArgumentValue(ARG_JDBC_DRIVER);
  String connection = (String)map.getArgumentValue(ARG_CONNECTION);
  String user = (String)map.getArgumentValue(ARG_USER);
  String password = (String)map.getArgumentValue(ARG_PASSWORD);
  String sql = (String)map.getArgumentValue(ARG_SQL);

  int caretPosition = authorAccess.getCaretOffset();
  try {
    authorAccess.getDocumentController().insertXMLFragment(
      getFragment(jdbcDriver, connection, user, password, sql), caretPosition);
  } catch (SQLException e) {
    throw new AuthorOperationException(
      "The operation failed due to the following database error: " 
      + e.getMessage(), e);
  } catch (ClassNotFoundException e) {
    throw new AuthorOperationException(
      "The JDBC database driver was not found. Tried to load ' " 
      + jdbcDriver + "'", e);
  }
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>The <codeph>getFragment</codeph> method loads the JDBC driver, connects to the database
          and extracts the data. The result is a <xmlelement>table</xmlelement> element from the
            <codeph>http://www.oxygenxml.com/sample/documentation</codeph> namespace. The
            <xmlelement>header</xmlelement> element contains the names of the SQL columns. All the
          text from the XML fragment is escaped. This means that the '&lt;' and '&amp;' characters
          are replaced with the '&amp;lt;' and '&amp;amp;' character entities to ensure that the
          fragment is well-formed.</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_fqb_dgk_54b">private String getFragment(String jdbcDriver, String connectionURL, String user,
  String password, String sql) throws SQLException, ClassNotFoundException {

      Properties pr = new Properties();
      pr.put("characterEncoding", "UTF8");
      pr.put("useUnicode", "TRUE");
      pr.put("user", user);
      pr.put("password", password);
        
      // Loads the database driver.
      Class.forName(jdbcDriver);        
      // Opens the connection
      Connection connection = DriverManager.getConnection(connectionURL, pr);
      java.sql.Statement statement = connection.createStatement();
      ResultSet resultSet = statement.executeQuery(sql);
        
      StringBuffer fragmentBuffer = new StringBuffer();
      fragmentBuffer.append(
        "&lt;table xmlns=" + 
        "'http://www.oxygenxml.com/sample/documentation'&gt;");
        
      //
      // Creates the table header.
      //
      fragmentBuffer.append("&lt;header&gt;");
      ResultSetMetaData metaData = resultSet.getMetaData();
      int columnCount = metaData.getColumnCount();
      for (int i = 1; i &lt;= columnCount; i++) {
          fragmentBuffer.append("&lt;td&gt;");
          fragmentBuffer.append(xmlEscape(metaData.getColumnName(i)));
          fragmentBuffer.append("&lt;/td&gt;");
      }
      fragmentBuffer.append("&lt;/header&gt;");
        
      //
      // Creates the table content.
      //
      while (resultSet.next()) {
          fragmentBuffer.append("&lt;tr&gt;");
          for (int i = 1; i &lt;= columnCount; i++) {
              fragmentBuffer.append("&lt;td&gt;");
              fragmentBuffer.append(xmlEscape(resultSet.getObject(i)));
              fragmentBuffer.append("&lt;/td&gt;");
          }
          fragmentBuffer.append("&lt;/tr&gt;");
      }
      
      fragmentBuffer.append("&lt;/table&gt;");
      
      // Cleanup
      resultSet.close();
      statement.close();
      connection.close();
      return fragmentBuffer.toString();        
}</codeblock>
          <note conkeyref="reusable_notes_java-files/sdf_project" id="note_gqb_dgk_54b"/>
        </info>
      </step>
      <step>
        <cmd>Package the compiled class into a <xref keyref="glossentry_jar"><term>JAR</term></xref>
          file.</cmd>
      </step>
      <step>
        <cmd>Copy the <term>JAR</term> file and the JDBC driver files into your custom
            <term>framework</term> directory (<filepath><term
              conkeyref="reusables-user-guide/oxy-install-dir"
            />\frameworks\[CUSTOM_FRAMEWORK_DIR]</filepath>).</cmd>
      </step>
      <step>
        <cmd>Add the <term>JARS</term> to the class path. To do this, open the <ph
            conkeyref="reusables-preferences-pages/preferences-document-type-association"/>, select
            <b>SDF</b> and click the <uicontrol>Edit</uicontrol> button. Select the
            <uicontrol>Classpath</uicontrol> tab in the lower part of the <xref
            href="the-document-type-dialog.dita#the-document-type-dialog"><uicontrol>Document
              Type</uicontrol> configuration dialog box</xref> and click the <uicontrol><image
              href="../img/Add16.png" id="image_en2_lt4_5r"/>Add</uicontrol> button. In the
          displayed dialog box, enter the location of the <term>JAR</term> file, relative to the <ph
            keyref="product"/>
          <filepath>frameworks</filepath> folder.</cmd>
      </step>
      <step>
        <cmd>Go to the <uicontrol>Actions</uicontrol> subtab. The action properties are:</cmd>
        <info>
          <ul id="ul_hqb_dgk_54b">
            <li id="li_iqb_dgk_54b" irina="irina">Set <b>ID</b> to <b>clients_report</b>.</li>
            <li id="li_jqb_dgk_54b" irina="irina">Set <b>Name</b> to <b>Clients Report</b>.</li>
            <li id="li_kqb_dgk_54b" irina="irina">Set <b>Menu access key</b> to letter <b>r</b>.</li>
            <li id="li_lqb_dgk_54b" irina="irina">Set <b>Description</b> to <b>Connects to the database and collects the list of
                clients</b>.</li>
            <li id="li_mqb_dgk_54b" irina="irina">Set <b>Toolbar icon</b> to <b>${framework}/TableDB20.png</b> (the
                <filepath>TableDB20.png</filepath> icon is stored in the
                <filepath>frameworks/sdf</filepath> folder).</li>
            <li id="li_nqb_dgk_54b" irina="irina">Leave empty the <b>Menu icon</b>.</li>
            <li id="li_oqb_dgk_54b" irina="irina">Set <b>shortcut key</b> to <uicontrol
                conkeyref="reusable-oxygen-shortcuts-list/ctrl_shift_c"/>.</li>
          </ul>
        </info>
      </step>
      <step>
        <cmd>The action will work only if the current element is a <b>section</b>. Set up the
          operation as follows:</cmd>
        <info>
          <ul id="ul_pqb_dgk_54b">
            <li id="li_qqb_dgk_54b" irina="irina">Set <b>XPath expression</b>
              to:<codeblock outputclass="language-ini" id="codeblock_rqb_dgk_54b">local-name()='section'</codeblock></li>
            <li id="li_sqb_dgk_54b" irina="irina">
              <p id="p_tqb_dgk_54b">Use the Java operation defined earlier to set the <b>Invoke
                  operation</b> field. Click the <uicontrol>Choose</uicontrol> button, then select
                  <codeph>simple.documentation.framework.QueryDatabaseOperation</codeph>. Once
                selected, the list of arguments is displayed. In the figure below the first
                argument, <i>jdbc_driver</i>, represents the class name of the MySQL JDBC driver.
                The connection string has the URL syntax:
                  <i>jdbc://&lt;database_host&gt;:&lt;database_port&gt;/&lt;database_name&gt;</i>.</p>
              <p id="p_uqb_dgk_54b">The SQL expression used in the example follows, but it can be any valid SELECT
                expression that can be applied to the
                database:<codeblock outputclass="language-sql" id="codeblock_vqb_dgk_54b">SELECT userID, email FROM users</codeblock></p>
            </li>
          </ul>
        </info>
      </step>
      <step>
        <cmd>Add the action to the toolbar, using the <uicontrol>Toolbar</uicontrol> panel.</cmd>
        <info>
          <p id="p_wqb_dgk_54b">
            <fig id="fig_xqb_dgk_54b">
              <title>Java Operation Arguments Setup</title>
              <image href="../img/sa_dg_operation_arguments_setup.png"/>
            </fig>
          </p>
        </info>
      </step>
    </steps>
    <result>
      <p id="p_yqb_dgk_54b">To test the action, open or create an XML file and place the cursor at a valid location.
        Then click the <uicontrol><image href="../img/TableDB20.png" id="image_vfk_kkz_tr"/>Create
          Report</uicontrol> button from the toolbar. You can see below the toolbar with the action
        button and sample table inserted by the <uicontrol>Clients Report</uicontrol> action.</p>
      <p id="p_zqb_dgk_54b">
        <fig id="fig_arb_dgk_54b">
          <title>Table Content Extracted from the Database</title>
          <image href="../img/dg_database_operation_result.png"/>
        </fig>
      </p>
    </result>
  </taskbody>
</task>
