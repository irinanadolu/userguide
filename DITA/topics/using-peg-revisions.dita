<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="using-peg-revisions">
  <title>Accessing Old Items from a Repository</title>
  <body>
    <p id="p_svj_dgk_54b">Usually, you point to an item from a repository using a URL. However, sometimes this might
      not be enough because the URL alone might point to a different item than the one you want and
      a <i>peg revision</i> is needed.</p>
    <p id="p_tvj_dgk_54b">A Subversion repository tracks any change made to its items by using <i>revisions</i>, which
      contain information such as the name of the author who made the changes, the date when they
      were made, and a number that uniquely identifies each of them. Over time, an item from a
      specific location in a repository evolves as a result of committing changes to it. When an
      item is deleted, its entire life cycle (all changes made to it from the moment it was created)
      remains recorded in the history of the repository. If a new item is created, with the same
      name and in the same location of the repository as a previously existing one, then both items
      are identified by the same URL even though they are located in different time frames. This is
      when a <i>peg revision</i> comes in handy. A <i>peg revision</i> is nothing more than a normal
      revision, but the difference between them is made by their usage. Many of the Subversion
      commands also accept a peg revision as a way to precisely identify an item in time, beside an
        <i>operative revision</i> (the revision regarding the used command).</p>
    <p id="p_uvj_dgk_54b"><b><u>Example:</u></b></p>
    <p id="p_vvj_dgk_54b">To illustrate an example, consider the following:<ul id="ul_yd4_yys_34">
        <li id="li_wvj_dgk_54b" irina="irina">A new repository file <codeph>config</codeph> was created, identified by the URL
            <codeph>http://host.com/myRepository/dir/config</codeph>.</li>
        <li id="li_xvj_dgk_54b" irina="irina">The file has been created at revision <codeph>10</codeph>.</li>
        <li id="li_yvj_dgk_54b" irina="irina">Over time, the file was modified by committing revisions <codeph>12, 15,
          17</codeph>.</li>
      </ul></p>
    <p id="p_zvj_dgk_54b">To access a specific version of the file identified by the
        <codeph>http://host.com/myRepository/dir/config</codeph> URL, you need to use a
      corresponding revision (the operative revision):<ul id="ul_a1t_b1t_34">
        <li id="li_awj_dgk_54b" irina="irina">If a revision number is used that is lower than <codeph>10</codeph>, an error is
          triggered, because the file has not been created yet.</li>
        <li id="li_bwj_dgk_54b" irina="irina">If a revision number is used that is between <codeph>10</codeph> and
          <codeph>19</codeph>, the specific version you are interested in would be
            obtained.<note id="note_cwj_dgk_54b">Although the file was modified in revisions <codeph>12, 15, 17</codeph>,
            it existed in all revisions between <codeph>10</codeph> and <codeph>19</codeph>.
            Starting with a revision where the file is modified, it has the same content across all
            revisions generated in the repository until another revision where it is modified
            again.</note></li>
      </ul></p>
    <p id="p_dwj_dgk_54b">At this point, the file is deleted, creating revision <codeph>20</codeph>. Now, no version of
      the file can be accessed because it no longer exists in the latest repository revision. This
      is due to the fact that Subversion automatically uses the <codeph>HEAD</codeph> revision as a
      peg revision (it assumes any item currently exists in the repository if not instructed
      otherwise). However, using any of the revision numbers from the <codeph>10-19</codeph>
      interval (when the file existed) as a peg revision (beside the operative revision), will help
      Subversion to properly identify the time frame when the file existed, and access the file
      version corresponding to the operative revision. If you use a revision number greater than
        <codeph>19</codeph>, this will also trigger an error.</p>
    <p id="p_ewj_dgk_54b">Continuing the example, suppose that at revision <codeph>30</codeph>, a directory called
        <codeph>config</codeph> is created in the same repository location as the deleted file. This
      means that the new directory will be identified by the same repository address:
        <codeph>http://host.com/myRepository/dir/config</codeph>. If you only use this URL in any
      Subversion command, you will access the new directory. You will also access the same directory
      if you use any revision number equal to or greater than <codeph>30</codeph> as peg revision.
      However, if you are interested in accessing an old version of the previously existing file,
      then you must use one of the revisions that existed (<codeph>10-19</codeph>), as a peg
      revision, similar to the previous case.</p>
  </body>
</topic>
